{
    "pipes": [
        {
            "name": "CardNumbersPipe",
            "id": "pipe-CardNumbersPipe-d66597ce205f3edf6ba61543334c76af5baaef21a9951cc7464ec15c053458fb64f2d01f7b060eaf0bb2536e5f28c45bbc0ce4ebd2702584dfc0d19aab23e7a7",
            "file": "src/app/shared/pipes/card-numbers.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "formatCardNumbers",
                    "args": [
                        {
                            "name": "cardNumbers",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cardNumbers",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideNumbers",
                    "args": [
                        {
                            "name": "cardNumbers",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hideFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hideTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cardNumbers",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hideFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hideTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hideFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        },
                        {
                            "name": "hideTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hideFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hideTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "cardNumbers",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'cardNumbers',\r\n  standalone: true\r\n})\r\nexport class CardNumbersPipe implements PipeTransform {\r\n  transform(\r\n    value: string | number,\r\n    hideFrom: number = -1,\r\n    hideTo: number = -1\r\n  ): string {\r\n    const cardNumbers: string = value.toString().split(' ').join('');\r\n\r\n    if (cardNumbers.length !== 16) {\r\n      console.error('Card numbers length must be equal 16!');\r\n      return cardNumbers;\r\n    }\r\n\r\n    if (hideFrom !== -1 && hideTo !== -1) {\r\n      const hiddenNumbers: string = this.hideNumbers(\r\n        cardNumbers,\r\n        hideFrom,\r\n        hideTo\r\n      );\r\n\r\n      return this.formatCardNumbers(hiddenNumbers);\r\n    }\r\n\r\n    return this.formatCardNumbers(cardNumbers);\r\n  }\r\n\r\n  private hideNumbers(\r\n    cardNumbers: string,\r\n    hideFrom: number,\r\n    hideTo: number\r\n  ): string {\r\n    return cardNumbers\r\n      .split('')\r\n      .reduce((acc: string, cardNumber: string, currentIndex: number) => {\r\n        if (currentIndex >= hideFrom && hideTo > currentIndex) {\r\n          return acc + '*';\r\n        }\r\n\r\n        return acc + cardNumber;\r\n      }, '');\r\n  }\r\n\r\n  private formatCardNumbers(cardNumbers: string): string {\r\n    return (\r\n      cardNumbers.slice(0, 4) +\r\n      ' ' +\r\n      cardNumbers.slice(4, 8) +\r\n      ' ' +\r\n      cardNumbers.slice(8, 12) +\r\n      ' ' +\r\n      cardNumbers.slice(12)\r\n    );\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "BaseProduct",
            "id": "interface-BaseProduct-699b02ff45823607142aa5c56b213d328badc24fb18c958f5f41d2f6cbc9c07935bf44b67c67f224f7d9ede809739e5c2c5599e3038e6befff7a387b3563b12e",
            "file": "src/app/shared/interfaces/api/product/product.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DBEntity } from '../database.interface';\r\nimport { Currency } from '../../../enums/api/currency/currency.enum';\r\n\r\nexport interface Product extends BaseProduct {}\r\n\r\nexport interface BaseProduct extends DBEntity {\r\n  name: string;\r\n  image: string;\r\n  category: string;\r\n  price: number;\r\n  currency: Currency;\r\n}\r\n\r\nexport interface ProductType {}\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Currency",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "DBEntity"
            ]
        },
        {
            "name": "BaseTransaction",
            "id": "interface-BaseTransaction-1024992f482ad66f07f2d11da587b69d6cab7b07a0db6bef69ee04d703e50827dd083eaa243d810af3350de66aa0a9a9209356b3d271e5b3b088c1bb4181e7cd",
            "file": "src/app/shared/interfaces/api/transaction/transaction.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DBEntity } from '../database.interface';\r\nimport { BaseProduct } from '../product/product.interface';\r\nimport { TransactionStatus } from '../../../enums/api/transaction/transaction.enum';\r\n\r\nexport interface Transaction extends BaseTransaction {}\r\n\r\nexport interface BaseTransaction extends DBEntity {\r\n  product: BaseProduct;\r\n  countProducts: number;\r\n  status: TransactionStatus;\r\n  date: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "countProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseProduct",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "DBEntity"
            ]
        },
        {
            "name": "DashboardWorkingChartDataset",
            "id": "interface-DashboardWorkingChartDataset-59a7f4990ea0795acbfdbddd43653306f0b053b242a923dd5ce79b1d9c1116c5d0913081ba33a1958fd6380b600ca8f63dbbe2373fd3b87c66c453272d226d26",
            "file": "src/app/features/dashboard/interfaces/dashboard-working-capital-chart.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface DashboardWorkingChartDatasetItem {\r\n  date: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface DashboardWorkingChartDataset {\r\n  incomes: DashboardWorkingChartDatasetItem[];\r\n  expenses: DashboardWorkingChartDatasetItem[];\r\n}\r\n\r\nexport interface DashboardWorkingChartLegend {\r\n  label: string;\r\n  color: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "expenses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardWorkingChartDatasetItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "incomes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DashboardWorkingChartDatasetItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DashboardWorkingChartDatasetItem",
            "id": "interface-DashboardWorkingChartDatasetItem-59a7f4990ea0795acbfdbddd43653306f0b053b242a923dd5ce79b1d9c1116c5d0913081ba33a1958fd6380b600ca8f63dbbe2373fd3b87c66c453272d226d26",
            "file": "src/app/features/dashboard/interfaces/dashboard-working-capital-chart.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface DashboardWorkingChartDatasetItem {\r\n  date: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface DashboardWorkingChartDataset {\r\n  incomes: DashboardWorkingChartDatasetItem[];\r\n  expenses: DashboardWorkingChartDatasetItem[];\r\n}\r\n\r\nexport interface DashboardWorkingChartLegend {\r\n  label: string;\r\n  color: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DashboardWorkingChartLegend",
            "id": "interface-DashboardWorkingChartLegend-59a7f4990ea0795acbfdbddd43653306f0b053b242a923dd5ce79b1d9c1116c5d0913081ba33a1958fd6380b600ca8f63dbbe2373fd3b87c66c453272d226d26",
            "file": "src/app/features/dashboard/interfaces/dashboard-working-capital-chart.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface DashboardWorkingChartDatasetItem {\r\n  date: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface DashboardWorkingChartDataset {\r\n  incomes: DashboardWorkingChartDatasetItem[];\r\n  expenses: DashboardWorkingChartDatasetItem[];\r\n}\r\n\r\nexport interface DashboardWorkingChartLegend {\r\n  label: string;\r\n  color: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DatePickerOption",
            "id": "interface-DatePickerOption-fd469f44256becec793e8bdc137fcfd664651c9b472353f0f21933957d977ae630bce7ca0cd82fc76c3605046c8fb51a0a5cf93c73ccf456bb2c796bf1111145",
            "file": "src/app/shared/interfaces/date-picker.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DatePickerDayMonth } from '../enums/date-picker.enum';\r\n\r\nexport interface DatePickerOption {\r\n  date: Date;\r\n  dayMonth: DatePickerDayMonth;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dayMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerDayMonth",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DBEntity",
            "id": "interface-DBEntity-5ae62053cc490f0549c154aa77b024d95eae007858badcd3ca936223546c35a0e200d7d684e8a4c3cc57a44c5809e14efd20b80f6b3f7981fb36c7ba1d9a4dfd",
            "file": "src/app/shared/interfaces/api/database.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DBEntity {\r\n  id: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DropdownItem",
            "id": "interface-DropdownItem-6fea955b437c9daf0d411b717bff970bb9bfed592f728a608e03f58439f5d6eff2e7a347a11c054d18e8fca2afbc4ff02fd506283ad1bda236a7d57a4a666cdb",
            "file": "src/app/shared/interfaces/dropdown.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DropdownItem {\r\n  [key: string]: any;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-6fea955b437c9daf0d411b717bff970bb9bfed592f728a608e03f58439f5d6eff2e7a347a11c054d18e8fca2afbc4ff02fd506283ad1bda236a7d57a4a666cdb",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "Filter",
            "id": "interface-Filter-e128ffd7aabb992b87d66a5c582f2cc76068c906f81119993a3b907fb2e3bc1a65ec90ec3c40f2f6a4bdb8fc7ad35b4fa6ff2dda9ae4df85cb60dc60283d84e2",
            "file": "src/app/shared/interfaces/filters.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Filter {\r\n  controlName: string;\r\n  type: FilterType;\r\n\r\n  query?: string;\r\n\r\n  options?: unknown[];\r\n  optionLabelName?: string | null;\r\n  optionValueName?: string | null;\r\n}\r\n\r\nexport enum FilterType {\r\n  Dropdown = 'dropdown'\r\n}\r\n",
            "properties": [
                {
                    "name": "controlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "optionLabelName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "optionValueName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "HorizontalTab",
            "id": "interface-HorizontalTab-e76249c8de01c2e63b6941fb387afff3d7f910545393bc62a13357c7b230d8d50bc1ba98280a5d5d7bcbce04e398c18c72b5693a9e8660c4953c31d42f44827c",
            "file": "src/app/shared/interfaces/horizontal-tab.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HorizontalTab {\r\n  label: string;\r\n  routerLink: string | string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InvoicesItem",
            "id": "interface-InvoicesItem-f8d7c181152982dd6dea17613f9159e7c33148452947c55961ba88e169d9a29be8492b72ae20fded4792e3107342e9b48877d34c7283ca3f990a1ba843c78761",
            "file": "src/app/features/invoices/interfaces/invoices-items.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl } from '@angular/forms';\r\n\r\nexport interface InvoicesItem {\r\n  name: string;\r\n  quantity: number;\r\n  rate: number;\r\n  total: number;\r\n}\r\n\r\nexport interface InvoicesItemGroup {\r\n  name: AbstractControl<string | null, null>;\r\n  quantity: AbstractControl<number | null, null>;\r\n  rate: AbstractControl<number | null, null>;\r\n  total: AbstractControl<number | null, null>;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InvoicesItemGroup",
            "id": "interface-InvoicesItemGroup-f8d7c181152982dd6dea17613f9159e7c33148452947c55961ba88e169d9a29be8492b72ae20fded4792e3107342e9b48877d34c7283ca3f990a1ba843c78761",
            "file": "src/app/features/invoices/interfaces/invoices-items.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl } from '@angular/forms';\r\n\r\nexport interface InvoicesItem {\r\n  name: string;\r\n  quantity: number;\r\n  rate: number;\r\n  total: number;\r\n}\r\n\r\nexport interface InvoicesItemGroup {\r\n  name: AbstractControl<string | null, null>;\r\n  quantity: AbstractControl<number | null, null>;\r\n  rate: AbstractControl<number | null, null>;\r\n  total: AbstractControl<number | null, null>;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl<string | null | >",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl<number | null | >",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "rate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl<number | null | >",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl<number | null | >",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Option",
            "id": "interface-Option-c03110066f289bcbc12981d3efbb17d0e90338d6430b19fab373fe0a7c390109838565d91d73e6b8db9de3bd3d0f37259d46cbf5e7ed4169dbea52470c790060",
            "file": "src/app/shared/interfaces/option.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { PrimitiveTypes } from '@angular/cli/src/analytics/analytics-parameters';\r\n\r\nexport interface Option {\r\n  id: PrimitiveTypes;\r\n  label: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PrimitiveTypes",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Product",
            "id": "interface-Product-699b02ff45823607142aa5c56b213d328badc24fb18c958f5f41d2f6cbc9c07935bf44b67c67f224f7d9ede809739e5c2c5599e3038e6befff7a387b3563b12e",
            "file": "src/app/shared/interfaces/api/product/product.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DBEntity } from '../database.interface';\r\nimport { Currency } from '../../../enums/api/currency/currency.enum';\r\n\r\nexport interface Product extends BaseProduct {}\r\n\r\nexport interface BaseProduct extends DBEntity {\r\n  name: string;\r\n  image: string;\r\n  category: string;\r\n  price: number;\r\n  currency: Currency;\r\n}\r\n\r\nexport interface ProductType {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "BaseProduct"
            ]
        },
        {
            "name": "ProductType",
            "id": "interface-ProductType-699b02ff45823607142aa5c56b213d328badc24fb18c958f5f41d2f6cbc9c07935bf44b67c67f224f7d9ede809739e5c2c5599e3038e6befff7a387b3563b12e",
            "file": "src/app/shared/interfaces/api/product/product.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DBEntity } from '../database.interface';\r\nimport { Currency } from '../../../enums/api/currency/currency.enum';\r\n\r\nexport interface Product extends BaseProduct {}\r\n\r\nexport interface BaseProduct extends DBEntity {\r\n  name: string;\r\n  image: string;\r\n  category: string;\r\n  price: number;\r\n  currency: Currency;\r\n}\r\n\r\nexport interface ProductType {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "Response",
            "id": "interface-Response-e5834257349d3dcf9ea3613835481c4e31647014c9d5b5933e1a59efc85af0f38a0479661db4585bce886453de1a070411c504f72ae97ab771fa241317290e0a",
            "file": "src/app/shared/interfaces/api/response.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Response<T> {\r\n  data: T;\r\n  code: number;\r\n  message: string;\r\n}\r\n\r\nexport interface ResponseError {\r\n  code: number;\r\n  type: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ResponseError",
            "id": "interface-ResponseError-e5834257349d3dcf9ea3613835481c4e31647014c9d5b5933e1a59efc85af0f38a0479661db4585bce886453de1a070411c504f72ae97ab771fa241317290e0a",
            "file": "src/app/shared/interfaces/api/response.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Response<T> {\r\n  data: T;\r\n  code: number;\r\n  message: string;\r\n}\r\n\r\nexport interface ResponseError {\r\n  code: number;\r\n  type: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Transaction",
            "id": "interface-Transaction-1024992f482ad66f07f2d11da587b69d6cab7b07a0db6bef69ee04d703e50827dd083eaa243d810af3350de66aa0a9a9209356b3d271e5b3b088c1bb4181e7cd",
            "file": "src/app/shared/interfaces/api/transaction/transaction.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DBEntity } from '../database.interface';\r\nimport { BaseProduct } from '../product/product.interface';\r\nimport { TransactionStatus } from '../../../enums/api/transaction/transaction.enum';\r\n\r\nexport interface Transaction extends BaseTransaction {}\r\n\r\nexport interface BaseTransaction extends DBEntity {\r\n  product: BaseProduct;\r\n  countProducts: number;\r\n  status: TransactionStatus;\r\n  date: string;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "BaseTransaction"
            ]
        },
        {
            "name": "VerticalTab",
            "id": "interface-VerticalTab-79860dde701758ee2bc8bd456d9bbd86442b76013260e267492d7f0b37aeb9fc72b01209cdc3ed13f72c1f16cce20ef107087e945fb4506ddd7d1382a5d9e869",
            "file": "src/app/shared/interfaces/vertical-tab.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VerticalTab {\r\n  label: string;\r\n  routerLink: string | string[];\r\n  icon?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "RouteTitleService",
            "id": "injectable-RouteTitleService-b393bf4decdbc49da36aa485f373325afd49cd592560e79673f0b3b5b773238a507b9a8eb418e60304f8a06a8c620228b101deed0abe7df173d5c4515f50b305",
            "file": "src/app/shared/services/route-title.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable } from 'rxjs';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RouteTitleService {\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  get activeRouterTitle() {\r\n    let route: ActivatedRoute = this.activatedRoute;\r\n\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n\r\n    return route.snapshot.data['title'];\r\n  }\r\n\r\n  get activeRouterTitle$(): Observable<string | undefined> {\r\n    return this.router.events.pipe(\r\n      filter((event): boolean => event instanceof NavigationEnd),\r\n      map((): ActivatedRoute => this.activatedRoute),\r\n      map((route: ActivatedRoute): string | undefined => {\r\n        while (route.firstChild) {\r\n          route = route.firstChild;\r\n        }\r\n\r\n        return route.snapshot.data['title'];\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "activeRouterTitle": {
                    "name": "activeRouterTitle",
                    "getSignature": {
                        "name": "activeRouterTitle",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                },
                "activeRouterTitle$": {
                    "name": "activeRouterTitle$",
                    "getSignature": {
                        "name": "activeRouterTitle$",
                        "type": "",
                        "returnType": "Observable<string | undefined>",
                        "line": 24
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-945be8090114870c3c73c86448b49c10064336af442002f944fb0dd44e8d5530abc54b3ec47da5abd8ab6c0f92a3bd1f8f43d9f3d1aa623d10ffb4d0f6f3bf4c",
            "file": "src/app/shared/services/theme.service.ts",
            "properties": [
                {
                    "name": "DARK_MATCH_MEDIA_KEY",
                    "defaultValue": "`(prefers-color-scheme: ${Theme.Dark})`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "LOCAL_STORAGE_KEY",
                    "defaultValue": "LocalStorageKey.Theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemThemeChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Theme>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { Theme } from '../../core/enums/themes.enum';\r\nimport { Observable, Subscriber } from 'rxjs';\r\nimport { LocalStorageKey } from '../enums/local-storage.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n  private readonly DARK_MATCH_MEDIA_KEY: string = `(prefers-color-scheme: ${Theme.Dark})`;\r\n  private readonly LOCAL_STORAGE_KEY: string = LocalStorageKey.Theme;\r\n  private readonly renderer: Renderer2;\r\n\r\n  private get currentTheme(): Theme {\r\n    return localStorage.getItem(this.LOCAL_STORAGE_KEY) as Theme;\r\n  }\r\n\r\n  private set currentTheme(theme: Theme) {\r\n    localStorage.setItem(this.LOCAL_STORAGE_KEY, theme);\r\n    this.currentThemeUI = theme;\r\n  }\r\n\r\n  private set currentThemeUI(theme: Theme) {\r\n    const htmlElement = this.renderer.selectRootElement('html', true);\r\n    this.renderer.setAttribute(htmlElement, 'data-theme', theme);\r\n  }\r\n\r\n  private get systemTheme(): Theme | null {\r\n    if (!window.matchMedia) {\r\n      return null;\r\n    }\r\n\r\n    const isDark: boolean = window.matchMedia(\r\n      this.DARK_MATCH_MEDIA_KEY\r\n    ).matches;\r\n\r\n    return isDark ? Theme.Dark : Theme.Light;\r\n  }\r\n\r\n  constructor(private rendererFactory: RendererFactory2) {\r\n    this.renderer = this.rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  toggleTheme(): void {\r\n    const oppositeTheme: Record<Theme, Theme> = {\r\n      [Theme.Light]: Theme.Dark,\r\n      [Theme.Dark]: Theme.Light\r\n    };\r\n\r\n    this.currentTheme = oppositeTheme[this.currentTheme];\r\n  }\r\n\r\n  initTheme(): void {\r\n    this.currentTheme = this.currentTheme || this.systemTheme || Theme.Light;\r\n\r\n    this.systemThemeChanges().subscribe({\r\n      next: (theme: Theme) => {\r\n        this.currentTheme = theme;\r\n      }\r\n    });\r\n  }\r\n\r\n  private systemThemeChanges(): Observable<Theme> {\r\n    return new Observable((observer: Subscriber<Theme>) => {\r\n      const EVENT_NAME: 'change' = 'change';\r\n\r\n      const callback = (event: MediaQueryListEvent) => {\r\n        observer.next(event.matches ? Theme.Dark : Theme.Light);\r\n      };\r\n\r\n      if (window.matchMedia == null) {\r\n        observer.error('Error while getting Match Media!');\r\n        observer.complete();\r\n        return;\r\n      }\r\n\r\n      window\r\n        .matchMedia(this.DARK_MATCH_MEDIA_KEY)\r\n        .addEventListener(EVENT_NAME, callback);\r\n\r\n      return () => {\r\n        window\r\n          .matchMedia(this.DARK_MATCH_MEDIA_KEY)\r\n          .removeEventListener(EVENT_NAME, callback);\r\n      };\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentTheme": {
                    "name": "currentTheme",
                    "setSignature": {
                        "name": "currentTheme",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "theme",
                                "type": "Theme",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "theme",
                                "type": "Theme",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentTheme",
                        "type": "",
                        "returnType": "Theme",
                        "line": 14
                    }
                },
                "currentThemeUI": {
                    "name": "currentThemeUI",
                    "setSignature": {
                        "name": "currentThemeUI",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "theme",
                                "type": "Theme",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "theme",
                                "type": "Theme",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "systemTheme": {
                    "name": "systemTheme",
                    "getSignature": {
                        "name": "systemTheme",
                        "type": "",
                        "returnType": "Theme | null",
                        "line": 28
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "CopyToClipboardDirective",
            "id": "directive-CopyToClipboardDirective-213799f3e1fd3030a46ecf0b37128e7dbded0433aa781dadd1a5abe12b7e0e8e0346d2595e1a7e069901f056b704fa55a4a4ab44be36068fc5e1ec298ae9259a",
            "file": "src/app/shared/directives/copy-to-clipboard.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ApplicationRef,\r\n  ChangeDetectorRef,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  input,\r\n  InputSignal,\r\n  OnDestroy,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { Clipboard } from '@angular/cdk/clipboard';\r\nimport { TooltipComponent } from '../components/tooltip/tooltip.component';\r\nimport { TooltipStyle } from '../enums/tooltip.enum';\r\n\r\n@Directive({ selector: '[copyToClipboard]', standalone: true })\r\nexport class CopyToClipboardDirective implements OnDestroy {\r\n  copyToClipboard: InputSignal<string> = input.required();\r\n  copyToClipboardTooltipShow: InputSignal<boolean> = input(true);\r\n  copyToClipboardTooltipShowDelay: InputSignal<number> = input(0);\r\n  copyToClipboardTooltipHideDelay: InputSignal<number> = input(0);\r\n\r\n  copyToClipboardTooltipText: InputSignal<string> = input('Click to Copy!');\r\n  copyToClipboardTooltipSuccess: InputSignal<string> = input('Copied!');\r\n  copyToClipboardTooltipHideAfterSuccessDelay: InputSignal<number> =\r\n    input(1000);\r\n\r\n  private componentRef: ComponentRef<TooltipComponent> | null = null;\r\n  private showTimeouts: ReturnType<typeof setTimeout>[] = [];\r\n  private hideTimeouts: ReturnType<typeof setTimeout>[] = [];\r\n\r\n  @HostBinding('style.cursor') cursor: string = 'pointer';\r\n  @HostListener('click', ['$event'])\r\n  onClick(): void {\r\n    this.clipboard.copy(this.copyToClipboard());\r\n\r\n    if (this.copyToClipboardTooltipShow()) {\r\n      this.initializeTooltip(\r\n        this.copyToClipboardTooltipSuccess(),\r\n        TooltipStyle.Success\r\n      );\r\n      this.setHideTooltipTimeout(\r\n        this.copyToClipboardTooltipHideAfterSuccessDelay()\r\n      );\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    if (this.copyToClipboardTooltipShow()) {\r\n      this.initializeTooltip(this.copyToClipboardTooltipText());\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    if (this.copyToClipboardTooltipShow()) {\r\n      this.setHideTooltipTimeout(this.copyToClipboardTooltipHideDelay());\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private appRef: ApplicationRef,\r\n    private vcr: ViewContainerRef,\r\n    private clipboard: Clipboard,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  private initializeTooltip(\r\n    tooltipText: string = this.copyToClipboardTooltipText(),\r\n    tooltipStyle: TooltipStyle = TooltipStyle.Default\r\n  ) {\r\n    this.clearAllTimeouts();\r\n\r\n    if (this.componentRef != null) {\r\n      this.componentRef.destroy();\r\n      this.componentRef = null;\r\n    }\r\n\r\n    this.createTooltip(tooltipText, tooltipStyle);\r\n    this.setShowTooltipTimeout();\r\n  }\r\n\r\n  private createTooltip(\r\n    tooltipText: string = this.copyToClipboardTooltipText(),\r\n    tooltipStyle: TooltipStyle = TooltipStyle.Default\r\n  ): void {\r\n    const { left, right, top } =\r\n      this.elementRef.nativeElement.getBoundingClientRect();\r\n\r\n    this.componentRef = this.vcr.createComponent(TooltipComponent);\r\n\r\n    this.componentRef.setInput('tooltip', tooltipText);\r\n    this.componentRef.setInput('style', tooltipStyle);\r\n    this.componentRef.setInput('left', Math.round((right - left) / 2 + left));\r\n    this.componentRef.setInput('top', Math.round(top));\r\n  }\r\n\r\n  private showTooltip(): void {\r\n    if (this.componentRef != null) {\r\n      this.componentRef.setInput('visible', true);\r\n    }\r\n  }\r\n\r\n  private hideTooltip(): void {\r\n    if (this.componentRef != null) {\r\n      this.componentRef.setInput('visible', false);\r\n    }\r\n  }\r\n\r\n  private setShowTooltipTimeout(\r\n    delay: number = this.copyToClipboardTooltipShowDelay()\r\n  ): void {\r\n    const timeout: ReturnType<typeof setTimeout> = setTimeout(() => {\r\n      this.showTooltip();\r\n      this.changeDetectorRef.markForCheck();\r\n    }, delay);\r\n\r\n    this.showTimeouts.push(timeout);\r\n  }\r\n\r\n  private setHideTooltipTimeout(\r\n    delay: number = this.copyToClipboardTooltipHideDelay()\r\n  ): void {\r\n    const timeout: ReturnType<typeof setTimeout> = setTimeout(() => {\r\n      this.hideTooltip();\r\n      this.changeDetectorRef.markForCheck();\r\n    }, delay);\r\n\r\n    this.hideTimeouts.push(timeout);\r\n  }\r\n\r\n  private clearAllTimeouts(): void {\r\n    this.showTimeouts.forEach((i) => clearTimeout(i));\r\n    this.showTimeouts = [];\r\n\r\n    this.hideTimeouts.forEach((i) => clearTimeout(i));\r\n    this.hideTimeouts = [];\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  private destroy(): void {\r\n    this.clearAllTimeouts();\r\n\r\n    if (this.componentRef !== null) {\r\n      this.appRef.detachView(this.componentRef.hostView);\r\n      this.componentRef.destroy();\r\n      this.componentRef = null;\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[copyToClipboard]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "copyToClipboard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "required": true
                },
                {
                    "name": "copyToClipboardTooltipHideAfterSuccessDelay",
                    "defaultValue": "1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "required": false
                },
                {
                    "name": "copyToClipboardTooltipHideDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "required": false
                },
                {
                    "name": "copyToClipboardTooltipShow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "required": false
                },
                {
                    "name": "copyToClipboardTooltipShowDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.cursor",
                    "defaultValue": "'pointer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<TooltipComponent> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "copyToClipboard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "required": true
                },
                {
                    "name": "copyToClipboardTooltipHideAfterSuccessDelay",
                    "defaultValue": "1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "required": false
                },
                {
                    "name": "copyToClipboardTooltipHideDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "required": false
                },
                {
                    "name": "copyToClipboardTooltipShow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "required": false
                },
                {
                    "name": "copyToClipboardTooltipShowDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                },
                {
                    "name": "copyToClipboardTooltipSuccess",
                    "defaultValue": "input('Copied!')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "copyToClipboardTooltipText",
                    "defaultValue": "input('Click to Copy!')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "cursor",
                    "defaultValue": "'pointer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.cursor'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "hideTimeouts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showTimeouts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearAllTimeouts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createTooltip",
                    "args": [
                        {
                            "name": "tooltipText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipText()"
                        },
                        {
                            "name": "tooltipStyle",
                            "type": "TooltipStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "TooltipStyle.Default"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tooltipText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipText()",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltipStyle",
                            "type": "TooltipStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "TooltipStyle.Default",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeTooltip",
                    "args": [
                        {
                            "name": "tooltipText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipText()"
                        },
                        {
                            "name": "tooltipStyle",
                            "type": "TooltipStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "TooltipStyle.Default"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tooltipText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipText()",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltipStyle",
                            "type": "TooltipStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "TooltipStyle.Default",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setHideTooltipTimeout",
                    "args": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipHideDelay()"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipHideDelay()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setShowTooltipTimeout",
                    "args": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipShowDelay()"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.copyToClipboardTooltipShowDelay()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FocusableDirective",
            "id": "directive-FocusableDirective-20810b60ec82f15c0e730739ae5610c1c5b53984d109d67568417895f7072748f90c2e77dc5a6d2962112fbcc880b82110443e2ac0b7eaaa3bc9f9496da76ba1",
            "file": "src/app/shared/directives/focusable.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, input, InputSignal } from '@angular/core';\r\n\r\ntype Both = '';\r\nexport type Focusable = Both | 'keyboard' | 'mouse' | 'none';\r\n\r\n@Directive({ selector: '[focusable]' })\r\nexport class FocusableDirective {\r\n  focusable: InputSignal<Focusable> = input<Focusable>('');\r\n\r\n  @HostBinding('tabIndex')\r\n  get tabIndex(): number {\r\n    return this.focusable() === 'keyboard' || this.focusable() === '' ? 0 : -1;\r\n  }\r\n\r\n  @HostBinding('style.pointer-events')\r\n  get pointerEvents(): string {\r\n    return this.focusable() === 'mouse' || this.focusable() === ''\r\n      ? 'auto'\r\n      : 'none';\r\n  }\r\n}\r\n",
            "selector": "[focusable]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.pointer-events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "focusable",
                    "defaultValue": "input<Focusable>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Focusable>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "extends": [],
            "accessors": {
                "tabIndex": {
                    "name": "tabIndex",
                    "getSignature": {
                        "name": "tabIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 11
                    }
                },
                "pointerEvents": {
                    "name": "pointerEvents",
                    "getSignature": {
                        "name": "pointerEvents",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                }
            }
        },
        {
            "name": "QueryControlDirective",
            "id": "directive-QueryControlDirective-bba1346c1cdc18df982d19a01b0a15e9d35ab934171d1e4bc7ef4a0ef10a895ca904b17ef8c40e0e5222e50dc7c4abad31cbb16e1b85fbcd2a099d6db666f777",
            "file": "src/app/shared/directives/query-control.directive.ts",
            "type": "directive",
            "description": "<p>Use this directive when you need to pass value to query params</p>\n<p>Note: Works bad with [(ngModel)]</p>\n",
            "rawdescription": "\n\nUse this directive when you need to pass value to query params\n\nNote: Works bad with [(ngModel)]\n",
            "sourceCode": "import {\r\n  Directive,\r\n  HostListener,\r\n  input,\r\n  InputSignal,\r\n  OnInit,\r\n  Optional\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { NgControl } from '@angular/forms';\r\n\r\n/**\r\n * Use this directive when you need to pass value to query params\r\n *\r\n * Note: Works bad with [(ngModel)]\r\n */\r\n@Directive({ selector: '[queryControl]', standalone: true })\r\nexport class QueryControlDirective implements OnInit {\r\n  queryControl: InputSignal<string> = input.required<string>();\r\n  queryEmitEvent: InputSignal<boolean> = input<boolean>(true);\r\n\r\n  @HostListener('ngModelChange', ['$event'])\r\n  onNgModelChange(rawValue: object | string): void {\r\n    if (this.queryControl == null) {\r\n      console.error('Ng Model Change! Query is not defined!');\r\n      return;\r\n    }\r\n\r\n    const queryParams: Params = this.activatedRoute.snapshot.queryParams;\r\n    const value: string =\r\n      typeof rawValue === 'object' ? JSON.stringify(rawValue) : rawValue;\r\n\r\n    this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { ...queryParams, [this.queryControl()]: value }\r\n    });\r\n  }\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    @Optional() private ngControl: NgControl\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.ngControl == null || this.ngControl.control == null) {\r\n      return;\r\n    }\r\n\r\n    const initialValue: string | undefined = this.getValueFromQuery(\r\n      this.queryControl()\r\n    );\r\n\r\n    if (initialValue) {\r\n      this.patchControlValue(initialValue);\r\n    }\r\n  }\r\n\r\n  private getValueFromQuery(\r\n    query: string | undefined,\r\n    queryParams: Params = this.activatedRoute.snapshot.queryParams\r\n  ): string | undefined {\r\n    if (query == null) {\r\n      console.error('Init Query! Query is not defined!');\r\n      return undefined;\r\n    }\r\n\r\n    if (this.ngControl && this.ngControl.control) {\r\n      this.ngControl.control.markAsTouched();\r\n      this.ngControl.control.markAsDirty();\r\n    }\r\n\r\n    return queryParams[query];\r\n  }\r\n\r\n  private patchControlValue(value: string): void {\r\n    if (value == null) {\r\n      console.error('Value is not defined!');\r\n      return;\r\n    }\r\n\r\n    if (this.ngControl == null || this.ngControl.control == null) {\r\n      console.error(\"Control doesn't exist!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.ngControl.control.patchValue(JSON.parse(value), {\r\n        emitEvent: this.queryEmitEvent\r\n      });\r\n    } catch (e) {\r\n      this.ngControl.control.patchValue(value, {\r\n        emitEvent: this.queryEmitEvent\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[queryControl]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "queryControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": true
                },
                {
                    "name": "queryEmitEvent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "required": false
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "ngModelChange",
                    "args": [
                        {
                            "name": "rawValue",
                            "type": "object | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23
                }
            ],
            "propertiesClass": [
                {
                    "name": "queryControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": true
                },
                {
                    "name": "queryEmitEvent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "required": false
                }
            ],
            "methodsClass": [
                {
                    "name": "getValueFromQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.activatedRoute.snapshot.queryParams"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.activatedRoute.snapshot.queryParams",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNgModelChange",
                    "args": [
                        {
                            "name": "rawValue",
                            "type": "object | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'ngModelChange', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawValue",
                            "type": "object | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchControlValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SkeletonDirective",
            "id": "directive-SkeletonDirective-f750e306ba50863ff4446f538a69b9da0066ccc609d550541d20121fad6e7bd5d45e97431c4bfc4471b19969a091c511e4f2638b42df4897b6910bf069f530fb",
            "file": "src/app/shared/directives/skeleton-loading.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ComponentRef,\r\n  Directive,\r\n  input,\r\n  InputSignal,\r\n  OnChanges,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { SkeletonLoaderComponent } from '../components/skeleton-loader/skeleton-loader.component';\r\n\r\n@Directive({ selector: '[skeleton]', standalone: true })\r\nexport class SkeletonDirective implements OnChanges {\r\n  skeleton: InputSignal<boolean> = input(false);\r\n  skeletonWidth: InputSignal<string> = input<string>(\r\n    `${this.random(30, 90)}px`\r\n  );\r\n  skeletonHeight: InputSignal<string> = input<string>('16px'); // Default text height\r\n\r\n  constructor(\r\n    private templateRef: TemplateRef<unknown>,\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const isLoadingChange: SimpleChange = changes['skeleton'];\r\n\r\n    if (isLoadingChange) {\r\n      this.viewContainerRef.clear();\r\n\r\n      if (isLoadingChange.currentValue) {\r\n        const skeletonLoaderComponentRef: ComponentRef<SkeletonLoaderComponent> =\r\n          this.viewContainerRef.createComponent(SkeletonLoaderComponent);\r\n\r\n        Object.assign(skeletonLoaderComponentRef.instance, {\r\n          width: this.skeletonWidth,\r\n          height: this.skeletonHeight\r\n        });\r\n      } else {\r\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n      }\r\n    }\r\n  }\r\n\r\n  private random(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n}\r\n",
            "selector": "[skeleton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "skeleton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "skeleton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false
                },
                {
                    "name": "skeletonHeight",
                    "defaultValue": "input<string>('16px')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "skeletonWidth",
                    "defaultValue": "input<string>(\r\n    `${this.random(30, 90)}px`\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "random",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TableLoadingDirective",
            "id": "directive-TableLoadingDirective-7649ba46696af075ec574ae0af0c0bf9bf84cce05c4bcef49b3d47c32166eef18dc5f7967357eddad3c496d324c09f1916c15b14e2af3b77693735a1951aa799",
            "file": "src/app/shared/directives/table-loading.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  input,\r\n  InputSignal,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChange,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\n@Directive({ selector: '[tableLoading]', standalone: true })\r\nexport class TableLoadingDirective implements OnChanges {\r\n  tableLoading: InputSignal<boolean> = input(false);\r\n\r\n  private loaderRow!: HTMLElement;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const tableLoading: SimpleChange = changes['tableLoading'];\r\n\r\n    if (tableLoading && tableLoading.firstChange) {\r\n      this.initLoaderRow();\r\n    }\r\n\r\n    if (tableLoading && tableLoading.currentValue != null) {\r\n      this.toggleLoadingShow(tableLoading.currentValue);\r\n    }\r\n  }\r\n\r\n  private toggleLoadingShow(isLoading: boolean = false): void {\r\n    const tableBody: unknown =\r\n      this.elementRef?.nativeElement?.querySelector('tbody');\r\n\r\n    if (!tableBody || this.loaderRow == null) {\r\n      return;\r\n    }\r\n\r\n    if (isLoading && this.renderer) {\r\n      this.renderer.appendChild(tableBody, this.loaderRow);\r\n    } else {\r\n      this.renderer.removeChild(tableBody, this.loaderRow);\r\n    }\r\n  }\r\n\r\n  private initLoaderRow(): void {\r\n    // Create Loading Row\r\n    this.loaderRow = this.renderer.createElement('tr');\r\n    const loaderCell: unknown = this.renderer.createElement('td');\r\n\r\n    const countColumns: string = String(this.getCountColumns());\r\n    this.renderer.setAttribute(loaderCell, 'colspan', countColumns);\r\n\r\n    // Create Div For Loader\r\n    const loaderDiv: unknown = this.renderer.createElement('div');\r\n    this.renderer.addClass(loaderDiv, 'table-loader');\r\n    this.renderer.setStyle(loaderDiv, 'text-align', 'center');\r\n    this.renderer.setStyle(loaderDiv, 'padding', '20px');\r\n\r\n    // Create Loading Text\r\n    const loadingText: unknown = this.renderer.createText('Loading...');\r\n    this.renderer.appendChild(loaderDiv, loadingText);\r\n    this.renderer.appendChild(loaderCell, loaderDiv);\r\n    this.renderer.appendChild(this.loaderRow, loaderCell);\r\n  }\r\n\r\n  private getCountColumns(): number {\r\n    const tableHeader = this.elementRef.nativeElement.querySelector('thead');\r\n    if (!tableHeader) {\r\n      return 1; // Default to 1 if there's no header\r\n    }\r\n\r\n    const firstRow = tableHeader.querySelector('tr');\r\n    return firstRow ? firstRow.children.length : 1;\r\n  }\r\n}\r\n",
            "selector": "[tableLoading]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "tableLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "required": false
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "loaderRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tableLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "required": false
                }
            ],
            "methodsClass": [
                {
                    "name": "getCountColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initLoaderRow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleLoadingShow",
                    "args": [
                        {
                            "name": "isLoading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "isLoading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-179a5b1f46da11927147acc91155a24a2a3b42227114186c5158df45a5a9b88c709a4175f3057696145e890704ac4f057dedf77aa6e5a371b5ce906b036d13f9",
            "file": "src/app/shared/directives/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ApplicationRef,\r\n  ChangeDetectorRef,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  input,\r\n  InputSignal,\r\n  OnDestroy,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { TooltipComponent } from '../components/tooltip/tooltip.component';\r\n\r\n@Directive({ selector: '[tooltip]', standalone: true })\r\nexport class TooltipDirective implements OnDestroy {\r\n  tooltip: InputSignal<string> = input('');\r\n  tooltipShowDelay: InputSignal<number> = input(0);\r\n  tooltipHideDelay: InputSignal<number> = input(0);\r\n\r\n  private componentRef: ComponentRef<any> | null = null;\r\n  private showTimeout?: ReturnType<typeof setTimeout>;\r\n  private hideTimeout?: ReturnType<typeof setTimeout>;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private appRef: ApplicationRef,\r\n    private vcr: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.initializeTooltip();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.setHideTooltipTimeout();\r\n  }\r\n\r\n  private initializeTooltip(): void {\r\n    clearTimeout(this.showTimeout);\r\n    clearTimeout(this.hideTimeout);\r\n\r\n    if (this.componentRef != null) {\r\n      this.setShowTooltipTimeout();\r\n      return;\r\n    }\r\n\r\n    this.createTooltip();\r\n    this.setShowTooltipTimeout();\r\n  }\r\n\r\n  private createTooltip(): void {\r\n    const { left, right, top } =\r\n      this.elementRef.nativeElement.getBoundingClientRect();\r\n\r\n    this.componentRef = this.vcr.createComponent(TooltipComponent);\r\n\r\n    this.componentRef.setInput('tooltip', this.tooltip());\r\n    this.componentRef.setInput('left', Math.round((right - left) / 2 + left));\r\n    this.componentRef.setInput('top', Math.round(top));\r\n  }\r\n\r\n  private showTooltip(): void {\r\n    if (this.componentRef != null) {\r\n      this.componentRef.setInput('visible', true);\r\n    }\r\n  }\r\n\r\n  private hideTooltip(): void {\r\n    if (this.componentRef != null) {\r\n      this.componentRef.setInput('visible', false);\r\n    }\r\n  }\r\n\r\n  private setShowTooltipTimeout(): void {\r\n    this.showTimeout = setTimeout((): void => {\r\n      this.showTooltip();\r\n      this.changeDetectorRef.markForCheck();\r\n    }, this.tooltipShowDelay());\r\n  }\r\n\r\n  private setHideTooltipTimeout(): void {\r\n    this.hideTimeout = setTimeout((): void => {\r\n      this.hideTooltip();\r\n      this.changeDetectorRef.markForCheck();\r\n    }, this.tooltipHideDelay());\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  private destroy(): void {\r\n    clearInterval(this.showTimeout);\r\n    clearInterval(this.hideTimeout);\r\n\r\n    if (this.componentRef !== null) {\r\n      this.appRef.detachView(this.componentRef.hostView);\r\n      this.componentRef.destroy();\r\n      this.componentRef = null;\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[tooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "tooltipHideDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": false
                },
                {
                    "name": "tooltipShowDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tooltipHideDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": false
                },
                {
                    "name": "tooltipShowDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                }
            ],
            "methodsClass": [
                {
                    "name": "createTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setHideTooltipTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setShowTooltipTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-aaf9f86ae5e869f2619a596efea99254a81a8b1b324fb07d8baf9096b4e9d0955db81babfddbb902d4fd7a423ba54e06ba5a956bdc989767d7fec610f9a7825e",
            "file": "src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { ThemeService } from './shared/services/theme.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(private themeService: ThemeService) {}\r\n\r\n  ngOnInit() {\r\n    this.themeService.initTheme();\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "AuthorizationContainerComponent",
            "id": "component-AuthorizationContainerComponent-f0ed32819dbe833a8fcac1275607bf24f212a6411674c6455b07d1b6df885c0ab01f4488a7a5f90e643f95394920b36c95511467d5742170b16215704dcd8829",
            "file": "src/app/shared/layout/authorization-container/authorization-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./authorization-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './authorization-container.component.html',\r\n  styleUrl: './authorization-container.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AuthorizationContainerComponent {}\r\n",
            "styleUrl": "./authorization-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"content\">\r\n  <header class=\"header\">\r\n    <div class=\"header__logo\">\r\n      <i class=\"header__logo_icon icon icon-logo\"></i>\r\n      <span class=\"header__logo_name\">Maglo.</span>\r\n    </div>\r\n  </header>\r\n  <main class=\"main\">\r\n    <router-outlet />\r\n  </main>\r\n</div>\r\n<div class=\"banner\">\r\n  <img\r\n    class=\"banner__image\"\r\n    src=\"../../../../../assets/images/authorization/banner.png\"\r\n    alt=\"Authorization Banner\"\r\n  />\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-aab36d97d979432857d8946158a81817809c7f146f3bcc90e3a1bc2658a770dae0ef17015bfb8759ea8fab7b1b348ed6273dfd7c93b4c5f6dadb84f63963adb8",
            "file": "src/app/shared/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "required": false
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "required": false
                },
                {
                    "name": "outlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OutputEmitterRef<Event>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OutputEmitterRef<Event>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "required": false
                },
                {
                    "name": "ButtonStyle",
                    "defaultValue": "ButtonStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "required": false
                },
                {
                    "name": "icon",
                    "defaultValue": "input<\n    string | string[] | undefined\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | [] | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "required": false
                },
                {
                    "name": "outlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                },
                {
                    "name": "severity",
                    "defaultValue": "input<ButtonSeverity>(\n    ButtonSeverity.Primary\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<ButtonSeverity>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "size",
                    "defaultValue": "input<ButtonSize>(ButtonSize.Medium)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<ButtonSize>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "SpinnerSize",
                    "defaultValue": "SpinnerSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "style",
                    "defaultValue": "input<ButtonStyle>(ButtonStyle.Default)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<ButtonStyle>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tooltip",
                    "defaultValue": "input<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "type",
                    "defaultValue": "input<ButtonType>(ButtonType.Submit)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<ButtonType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  input,\n  InputSignal,\n  output,\n  OutputEmitterRef\n} from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { SpinnerComponent } from '../spinner/spinner.component';\nimport {\n  ButtonSeverity,\n  ButtonSize,\n  ButtonStyle,\n  ButtonType\n} from '../../enums/button.enum';\nimport { SpinnerSize } from '../../enums/spiner.enum';\n\n@Component({\n  selector: 'app-button',\n  imports: [NgClass, SpinnerComponent],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonComponent {\n  // Styles\n  style: InputSignal<ButtonStyle> = input<ButtonStyle>(ButtonStyle.Default);\n  size: InputSignal<ButtonSize> = input<ButtonSize>(ButtonSize.Medium);\n  type: InputSignal<ButtonType> = input<ButtonType>(ButtonType.Submit);\n  severity: InputSignal<ButtonSeverity> = input<ButtonSeverity>(\n    ButtonSeverity.Primary\n  );\n\n  outlined: InputSignal<boolean> = input<boolean>(false);\n\n  // States\n  disabled: InputSignal<boolean> = input<boolean>(false);\n  loading: InputSignal<boolean> = input<boolean>(false);\n\n  // Icon\n  icon: InputSignal<string | string[] | undefined> = input<\n    string | string[] | undefined\n  >();\n\n  // Tooltip\n  tooltip: InputSignal<string | undefined> = input<string | undefined>();\n\n  buttonClick: OutputEmitterRef<Event> = output<Event>();\n\n  protected readonly SpinnerSize: typeof SpinnerSize = SpinnerSize;\n  protected readonly ButtonStyle: typeof ButtonStyle = ButtonStyle;\n\n  onClick(event: Event): void {\n    this.buttonClick.emit(event);\n  }\n}\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\r\n  data-testingId=\"button\"\r\n  class=\"button\"\r\n  [type]=\"type()\"\r\n  [disabled]=\"disabled() || loading()\"\r\n  [attr.data-size]=\"size()\"\r\n  [attr.data-style]=\"style()\"\r\n  [attr.data-severity]=\"severity()\"\r\n  [attr.data-bordered]=\"outlined()\"\r\n  (click)=\"onClick($event)\"\r\n>\r\n  @if (icon()) {\r\n    <span data-testingId=\"icon\" class=\"button__icon icon\" [ngClass]=\"icon()\">\r\n      <span class=\"path1\"></span>\r\n      <span class=\"path2\"></span>\r\n      <span class=\"path3\"></span>\r\n      <span class=\"path4\"></span>\r\n    </span>\r\n  }\r\n\r\n  @if (style() !== ButtonStyle.Icon) {\r\n    <span data-testingId=\"content\" class=\"button__content\">\r\n      <ng-content />\r\n    </span>\r\n  }\r\n\r\n  @if (loading()) {\r\n    <span data-testingId=\"loader\" class=\"button__loading\">\r\n      <app-spinner [size]=\"SpinnerSize.Small\" />\r\n    </span>\r\n  }\r\n</button>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-3e1b2531864d0f9a2783dc9e552ce20ced03ff866f041209e8393a960c7c2d6a51f6935f4476870c13d049e7995fc877e3547b74cc625caf2aec9ffe154d1d4d",
            "file": "src/app/shared/components/controllers/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "required": false
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "required": false
                },
                {
                    "name": "isChecked",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "label",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": false
                }
            ],
            "methodsClass": [
                {
                    "name": "onCheckboxClick",
                    "args": [
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "outsideValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "outsideValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  input,\r\n  InputSignal,\r\n  signal,\r\n  WritableSignal\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  imports: [FormsModule],\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrl: './checkbox.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => CheckboxComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CheckboxComponent implements ControlValueAccessor {\r\n  trueValue: InputSignal<unknown> = input<unknown>(true);\r\n  falseValue: InputSignal<unknown> = input<unknown>(false);\r\n  label: InputSignal<string> = input<string>('');\r\n\r\n  isChecked: WritableSignal<boolean> = signal<boolean>(false);\r\n  isDisabled: WritableSignal<boolean> = signal<boolean>(false);\r\n\r\n  onCheckboxClick(isChecked: boolean): void {\r\n    this.isChecked.set(isChecked);\r\n\r\n    if (this.isChecked()) {\r\n      this.onChange(this.trueValue());\r\n    } else {\r\n      this.onChange(this.falseValue());\r\n    }\r\n\r\n    this.onTouch();\r\n  }\r\n\r\n  // Value Accessor Functions\r\n  private onChange!: (value: unknown) => void;\r\n  private onTouch!: () => void;\r\n\r\n  registerOnChange(fn: (value: unknown) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled.set(isDisabled);\r\n  }\r\n\r\n  writeValue(outsideValue: unknown): void {\r\n    const isChecked: boolean =\r\n      JSON.stringify(outsideValue) === JSON.stringify(this.trueValue());\r\n\r\n    this.isChecked.set(isChecked);\r\n  }\r\n}\r\n",
            "styleUrl": "./checkbox.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<label class=\"checkbox\">\r\n  <!-- Hidden -->\r\n  <input\r\n    class=\"checkbox__input\"\r\n    type=\"checkbox\"\r\n    [ngModel]=\"isChecked()\"\r\n    (ngModelChange)=\"onCheckboxClick($event)\"\r\n  />\r\n\r\n  <!-- UI Checkbox Content -->\r\n  <span class=\"checkbox__content\">\r\n    @if (isChecked()) {\r\n      <i class=\"icon icon-done\"></i>\r\n    }\r\n  </span>\r\n\r\n  <!-- Label -->\r\n  @if (label()) {\r\n    <span class=\"checkbox__name\">{{ label() }}</span>\r\n  }\r\n</label>\r\n"
        },
        {
            "name": "CreditCardComponent",
            "id": "component-CreditCardComponent-2c9cd9a4326825fb45ef17c74a3da68f0bddcb443ed4e3a5c483dfc1112207a9379715e6a39e3ae7658c1356c75a0597b09b11dd97acef22cc7aa1b8e3be95d6",
            "file": "src/app/shared/components/credit-card/credit-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-credit-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./credit-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bankName",
                    "defaultValue": "input<string>('Universal Bank')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cardNumbers",
                    "defaultValue": "input<string>('1234567891234567')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "CreditCardType",
                    "defaultValue": "CreditCardType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "expireDate",
                    "defaultValue": "input<Date | number>(new Date())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Date | number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "defaultValue": "input<CreditCardType>(\r\n    CreditCardType.Visa\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<CreditCardType>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "CardNumbersPipe",
                    "type": "pipe"
                },
                {
                    "name": "CopyToClipboardDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\nimport { CreditCardType } from '../../enums/credit-card.enum';\r\nimport { CardNumbersPipe } from '../../pipes/card-numbers.pipe';\r\nimport { CopyToClipboardDirective } from '../../directives/copy-to-clipboard.directive';\r\n\r\n@Component({\r\n  selector: 'app-credit-card',\r\n  imports: [DatePipe, CardNumbersPipe, CopyToClipboardDirective],\r\n  templateUrl: './credit-card.component.html',\r\n  styleUrl: './credit-card.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CreditCardComponent {\r\n  bankName: InputSignal<string> = input<string>('Universal Bank');\r\n  cardNumbers: InputSignal<string> = input<string>('1234567891234567');\r\n  expireDate: InputSignal<Date | number> = input<Date | number>(new Date());\r\n  type: InputSignal<CreditCardType> = input<CreditCardType>(\r\n    CreditCardType.Visa\r\n  );\r\n\r\n  protected readonly CreditCardType: typeof CreditCardType = CreditCardType;\r\n}\r\n",
            "styleUrl": "./credit-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"card\">\r\n  <div class=\"card__header\">\r\n    <h5 class=\"card__header_logo\">Maglo.</h5>\r\n    <span class=\"card__header_separator\">|</span>\r\n    <span class=\"card__header_bank-name\">\r\n      {{ bankName() }}\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"card__icons\">\r\n    <span class=\"icon icon-chip\">\r\n      <span class=\"path1\"></span>\r\n      <span class=\"path2\"></span>\r\n      <span class=\"path3\"></span>\r\n      <span class=\"path4\"></span>\r\n      <span class=\"path5\"></span>\r\n      <span class=\"path6\"></span>\r\n      <span class=\"path7\"></span>\r\n      <span class=\"path8\"></span>\r\n    </span>\r\n    <span class=\"icon icon-wifi\"></span>\r\n  </div>\r\n\r\n  <div class=\"card__content\">\r\n    <div class=\"card__metadata\">\r\n      <span class=\"card__metadata_numbers\" [copyToClipboard]=\"cardNumbers()\">\r\n        {{ cardNumbers() | cardNumbers: 6 : 12 }}\r\n      </span>\r\n      <span class=\"card__metadata_expire\">\r\n        {{ expireDate() | date: 'MM/YY' }}\r\n      </span>\r\n    </div>\r\n    <div class=\"card__type\">\r\n      @switch (type()) {\r\n        @case (CreditCardType.MasterCard) {\r\n          <span class=\"icon icon-mastercard\">\r\n            <span class=\"path1\"></span>\r\n            <span class=\"path2\"></span>\r\n            <span class=\"path3\"></span>\r\n            <span class=\"path4\"></span>\r\n          </span>\r\n        }\r\n        @case (CreditCardType.Visa) {\r\n          <span class=\"icon icon-visa\"></span>\r\n        }\r\n      }\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardContainerComponent",
            "id": "component-DashboardContainerComponent-f74599d93c3c18bcd24c392dfef4610409f87aa4f52b36985cdf716cd9b52cae6c0a909d1942a331beb09b441948267bc53dad10c5edc3a128d48e7e210de5a7",
            "file": "src/app/shared/layout/dashboard-container/dashboard-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeRouterTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "BOTTOM_SIDEBAR",
                    "defaultValue": "BOTTOM_SIDEBAR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerticalTab[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonSize",
                    "defaultValue": "ButtonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonStyle",
                    "defaultValue": "ButtonStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "TOP_SIDEBAR",
                    "defaultValue": "TOP_SIDEBAR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerticalTab[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onThemeChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ProfileComponent",
                    "type": "component"
                },
                {
                    "name": "VerticalTabsComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  DestroyRef,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { BOTTOM_SIDEBAR, TOP_SIDEBAR } from '../../constants/sidebar.constant';\r\nimport { ButtonComponent } from '../../components/button/button.component';\r\nimport { ProfileComponent } from '../../components/profile/profile.component';\r\nimport { VerticalTabsComponent } from '../../components/tabs/vertical-tabs/vertical-tabs.component';\r\nimport { RouterLink, RouterOutlet } from '@angular/router';\r\nimport { VerticalTab } from '../../interfaces/vertical-tab.interface';\r\nimport {\r\n  ButtonSeverity,\r\n  ButtonSize,\r\n  ButtonStyle\r\n} from '../../enums/button.enum';\r\nimport { RouteTitleService } from '../../services/route-title.service';\r\nimport { ThemeService } from '../../services/theme.service';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\n\r\n@Component({\r\n  imports: [\r\n    ButtonComponent,\r\n    ProfileComponent,\r\n    VerticalTabsComponent,\r\n    RouterLink,\r\n    RouterOutlet\r\n  ],\r\n  templateUrl: './dashboard-container.component.html',\r\n  styleUrl: './dashboard-container.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardContainerComponent implements OnInit {\r\n  activeRouterTitle?: string = '';\r\n\r\n  protected readonly TOP_SIDEBAR: VerticalTab[] = TOP_SIDEBAR;\r\n  protected readonly BOTTOM_SIDEBAR: VerticalTab[] = BOTTOM_SIDEBAR;\r\n  protected readonly ButtonSeverity: typeof ButtonSeverity = ButtonSeverity;\r\n  protected readonly ButtonSize: typeof ButtonSize = ButtonSize;\r\n  protected readonly ButtonStyle: typeof ButtonStyle = ButtonStyle;\r\n\r\n  constructor(\r\n    private routeTitleService: RouteTitleService,\r\n    private themeService: ThemeService,\r\n    private destroyRef: DestroyRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.activeRouterTitle = this.routeTitleService.activeRouterTitle;\r\n\r\n    this.routeTitleService.activeRouterTitle$\r\n      .pipe(takeUntilDestroyed(this.destroyRef))\r\n      .subscribe({\r\n        next: (routeTitle: string | undefined) => {\r\n          this.activeRouterTitle = routeTitle;\r\n        }\r\n      });\r\n  }\r\n\r\n  onThemeChange() {\r\n    this.themeService.toggleTheme();\r\n  }\r\n}\r\n",
            "styleUrl": "./dashboard-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "routeTitleService",
                        "type": "RouteTitleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "destroyRef",
                        "type": "DestroyRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "routeTitleService",
                        "type": "RouteTitleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "destroyRef",
                        "type": "DestroyRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"sidebar\">\r\n    <a class=\"sidebar__logo\" routerLink=\"dashboard\">\r\n      <i class=\"sidebar__logo_icon icon icon-logo\"></i>\r\n      <span class=\"sidebar__logo_name\">Maglo.</span>\r\n    </a>\r\n    <div class=\"menus\">\r\n      <div class=\"menu menu--top\">\r\n        <app-vertical-tabs [tabs]=\"TOP_SIDEBAR\" />\r\n      </div>\r\n      <div class=\"menu menu--bottom\">\r\n        <app-vertical-tabs [tabs]=\"BOTTOM_SIDEBAR\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"content\">\r\n    <header class=\"content__header header\">\r\n      <div class=\"header__page\">\r\n        <h2 class=\"header__page_title\">{{ activeRouterTitle }}</h2>\r\n      </div>\r\n      <div class=\"header__user\">\r\n        <div class=\"header__user_theme-toggle\">\r\n          <app-button\r\n            icon=\"icon icon-theme-toggle\"\r\n            [outlined]=\"true\"\r\n            [style]=\"ButtonStyle.Icon\"\r\n            [size]=\"ButtonSize.Small\"\r\n            [severity]=\"ButtonSeverity.Secondary\"\r\n            (buttonClick)=\"onThemeChange()\"\r\n          />\r\n        </div>\r\n        <div class=\"header__user_notifications\">\r\n          <app-button\r\n            icon=\"icon icon-notification-bing\"\r\n            [outlined]=\"true\"\r\n            [style]=\"ButtonStyle.Icon\"\r\n            [size]=\"ButtonSize.Small\"\r\n            [severity]=\"ButtonSeverity.Secondary\"\r\n          />\r\n        </div>\r\n        <div class=\"header__user_profile\">\r\n          <app-profile />\r\n        </div>\r\n      </div>\r\n    </header>\r\n\r\n    <main class=\"content__main main\">\r\n      <router-outlet />\r\n    </main>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardPageComponent",
            "id": "component-DashboardPageComponent-cad204b2f2d09b0d4c78ac145ce889de5035e59484c55f29048293a672b88b91ebac2a6a0a5941fbcbb94570cc2563013a88f4a140a87a1071d19f27c8f95a84",
            "file": "src/app/features/dashboard/pages/dashboard-page/dashboard-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-page',\r\n  templateUrl: './dashboard-page.component.html',\r\n  styleUrl: './dashboard-page.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardPageComponent {}\r\n",
            "styleUrl": "./dashboard-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"content\">\r\n    <div class=\"content__general\">\r\n      <div class=\"content__general_statistic-cards\">\r\n        <app-dashboard-statistic-card\r\n          icon=\"icon icon-wallet\"\r\n          label=\"Total balance\"\r\n          value=\"$5240.21\"\r\n        />\r\n        <app-dashboard-statistic-card\r\n          icon=\"icon icon-wallet\"\r\n          label=\"Total spending\"\r\n          value=\"$250.80\"\r\n        />\r\n        <app-dashboard-statistic-card\r\n          icon=\"icon icon-wallet-add\"\r\n          label=\"Total saved\"\r\n          value=\"$40.21\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"content__general_working-capital\">\r\n        <app-dashboard-working-capital />\r\n      </div>\r\n\r\n      <div class=\"content__general_recent-transactions\">\r\n        <app-dashboard-recent-transactions />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"content__wallets\">\r\n      <div class=\"content__wallets_info\">\r\n        <app-dashboard-wallets />\r\n      </div>\r\n\r\n      <div class=\"content__wallets_scheduled-transfers\">\r\n        <app-dashboard-scheduled-transfers />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardRecentTransactionsComponent",
            "id": "component-DashboardRecentTransactionsComponent-cf384160bfe98eb8c97b2fdefc5d58f03792e5443f7e012a2a1d69ce445a5afa812e2a6e56ef85803f301c615a74e5f050668f2039b3aa690a73c32060e62187",
            "file": "src/app/features/dashboard/components/dashboard-recent-transactions/dashboard-recent-transactions.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-recent-transactions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-recent-transactions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-recent-transactions',\r\n  templateUrl: './dashboard-recent-transactions.component.html',\r\n  styleUrl: './dashboard-recent-transactions.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardRecentTransactionsComponent {}\r\n",
            "styleUrl": "./dashboard-recent-transactions.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n    <h3 class=\"header__title\">Recent Transaction</h3>\r\n\r\n    <app-link [link]=\"[]\">View All</app-link>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <div class=\"content__table\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name/Business</th>\r\n            <th>Type</th>\r\n            <th>Amount</th>\r\n            <th>Date</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td>Mobile</td>\r\n            <td>$420.84</td>\r\n            <td>14 Apr 2022</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td>Mobile</td>\r\n            <td>$420.84</td>\r\n            <td>14 Apr 2022</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td>Mobile</td>\r\n            <td>$420.84</td>\r\n            <td>14 Apr 2022</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardScheduledTransfersComponent",
            "id": "component-DashboardScheduledTransfersComponent-765e366dfe8da26179dd0efcd91ae1cc6002ca1c30fc2a968c68b3571e2a34e3a9b00f93734c7efdb465ba2d8b9879f04fcd486058b4a0319ad391d4f4cd63a1",
            "file": "src/app/features/dashboard/components/dashboard-scheduled-transfers/dashboard-scheduled-transfers.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-scheduled-transfers",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-scheduled-transfers.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-scheduled-transfers',\r\n  standalone: false,\r\n  templateUrl: './dashboard-scheduled-transfers.component.html',\r\n  styleUrl: './dashboard-scheduled-transfers.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardScheduledTransfersComponent {}\r\n",
            "styleUrl": "./dashboard-scheduled-transfers.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n    <h3 class=\"header__title\">Scheduled Transfers</h3>\r\n\r\n    <app-link [link]=\"[]\">View All</app-link>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <div class=\"content__table\">\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><app-transaction-product /></td>\r\n            <td class=\"value\">{{ -435 | currency }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardStatisticCardComponent",
            "id": "component-DashboardStatisticCardComponent-1704aa929f25fe05743d862c95160bd28993361591ab925f7dd1e5ba099f3df1a1cfbaed8c4919b7f5f4db9c1199f4ed32791a37c0fcd0bbe1f89f1c5bb5b437",
            "file": "src/app/features/dashboard/components/dashboard-statistic-card/dashboard-statistic-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-statistic-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-statistic-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                },
                {
                    "name": "label",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "defaultValue": "input<\r\n    string | number | undefined\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | number | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-statistic-card',\r\n  templateUrl: './dashboard-statistic-card.component.html',\r\n  styleUrl: './dashboard-statistic-card.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardStatisticCardComponent {\r\n  icon: InputSignal<string> = input<string>('');\r\n  label: InputSignal<string> = input<string>('');\r\n  value: InputSignal<string | number | undefined> = input<\r\n    string | number | undefined\r\n  >();\r\n\r\n  isLoading: InputSignal<boolean> = input<boolean>(false);\r\n}\r\n",
            "styleUrl": "./dashboard-statistic-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"card\">\r\n  @if (icon()) {\r\n    <div class=\"card__icon\">\r\n      <i [ngClass]=\"[icon()]\"></i>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"card__content\">\r\n    <h5 class=\"card__content_label\">{{ label() }}</h5>\r\n    <span\r\n      *skeleton=\"isLoading(); width: '100%'; height: '30px'\"\r\n      class=\"card__content_value\"\r\n    >\r\n      {{ value() }}\r\n    </span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardWalletsComponent",
            "id": "component-DashboardWalletsComponent-dfb338332b0888b8f1be010d414dfba49b2122c9d32e8cb767a8b35fde4b90cc528ae7f3bf8a2674efb5b3012fd3cd6b135c2258b1a1bb49a58df6773c10a510",
            "file": "src/app/features/dashboard/components/dashboard-wallets/dashboard-wallets.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-wallets",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-wallets.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonSize",
                    "defaultValue": "ButtonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "creditCards",
                    "defaultValue": "[\r\n    {\r\n      type: CreditCardType.Visa,\r\n      number: '2133 2433 2134 4242',\r\n      expirationDate: '12/2020'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "CreditCardType",
                    "defaultValue": "CreditCardType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport {\r\n  ButtonSeverity,\r\n  ButtonSize\r\n} from '../../../../shared/enums/button.enum';\r\nimport { CreditCardType } from '../../../../shared/enums/credit-card.enum';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-wallets',\r\n  templateUrl: './dashboard-wallets.component.html',\r\n  styleUrl: './dashboard-wallets.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardWalletsComponent {\r\n  protected readonly ButtonSeverity = ButtonSeverity;\r\n  protected readonly ButtonSize = ButtonSize;\r\n\r\n  creditCards = [\r\n    {\r\n      type: CreditCardType.Visa,\r\n      number: '2133 2433 2134 4242',\r\n      expirationDate: '12/2020'\r\n    }\r\n  ];\r\n\r\n  protected readonly CreditCardType = CreditCardType;\r\n}\r\n",
            "styleUrl": "./dashboard-wallets.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-credit-card\r\n  bankName=\"Privat Bank\"\r\n  cardNumbers=\"4444415820049400\"\r\n  [type]=\"CreditCardType.MasterCard\"\r\n/>\r\n\r\n<!--<app-button [severity]=\"ButtonSeverity.Success\" [size]=\"ButtonSize.Wide\">-->\r\n<!--  + Add Credit Card-->\r\n<!--</app-button>-->\r\n"
        },
        {
            "name": "DashboardWorkingCapitalChartComponent",
            "id": "component-DashboardWorkingCapitalChartComponent-136fe722799de5609e3f2763af9fba8925ce94ccc56b169aaa3064d7bc0b6aeb98cccd882bbddff264aca02d177d3eb9acc9f79b76b8a46789368be157cafd49",
            "file": "src/app/features/dashboard/components/dashboard-working-capital/dashboard-working-capital-chart/dashboard-working-capital-chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-working-capital-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-working-capital-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "datasets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<DashboardWorkingChartDataset | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "defaultValue": "viewChild.required<ElementRef<HTMLCanvasElement>>('chart')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<ElementRef<HTMLCanvasElement>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "chartRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chart",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datasets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<DashboardWorkingChartDataset | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "required": false
                },
                {
                    "name": "legends",
                    "defaultValue": "input<\r\n    DashboardWorkingChartLegend[]\r\n  >([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<DashboardWorkingChartLegend[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "legendsChange",
                    "defaultValue": "output<DashboardWorkingChartLegend[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OutputEmitterRef<DashboardWorkingChartLegend[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "getChartConfig",
                    "args": [
                        {
                            "name": "test",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ChartConfiguration<line>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "test",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upsertChart",
                    "args": [
                        {
                            "name": "test",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "test",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  input,\r\n  InputSignal,\r\n  OnChanges,\r\n  output,\r\n  OutputEmitterRef,\r\n  Signal,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  viewChild\r\n} from '@angular/core';\r\nimport {\r\n  Chart,\r\n  ChartConfiguration,\r\n  ChartData,\r\n  ChartDataset,\r\n  registerables\r\n} from 'chart.js';\r\nimport { createDashboardWorkingCapitalChartConfig } from '../../../utils/dashboard-working-capital-chart.util';\r\nimport {\r\n  DashboardWorkingChartDataset,\r\n  DashboardWorkingChartLegend\r\n} from '../../../interfaces/dashboard-working-capital-chart.interface';\r\n\r\nChart.register(...registerables);\r\n\r\n@Component({\r\n  selector: 'app-dashboard-working-capital-chart',\r\n  templateUrl: './dashboard-working-capital-chart.component.html',\r\n  styleUrl: './dashboard-working-capital-chart.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardWorkingCapitalChartComponent\r\n  implements AfterViewInit, OnChanges\r\n{\r\n  private readonly chart: Signal<ElementRef<HTMLCanvasElement>> =\r\n    viewChild.required<ElementRef<HTMLCanvasElement>>('chart');\r\n\r\n  datasets: InputSignal<DashboardWorkingChartDataset | undefined> =\r\n    input<DashboardWorkingChartDataset>();\r\n\r\n  legends: InputSignal<DashboardWorkingChartLegend[]> = input<\r\n    DashboardWorkingChartLegend[]\r\n  >([]);\r\n\r\n  legendsChange: OutputEmitterRef<DashboardWorkingChartLegend[]> =\r\n    output<DashboardWorkingChartLegend[]>();\r\n\r\n  private chartRef?: Chart;\r\n\r\n  ngAfterViewInit() {\r\n    this.upsertChart([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const datasets: SimpleChange = changes['datasets'];\r\n\r\n    if (this.chart() && datasets && !datasets.firstChange) {\r\n      this.upsertChart(datasets.currentValue);\r\n    }\r\n  }\r\n\r\n  private upsertChart(test: any[]) {\r\n    if (this.chartRef) {\r\n      this.chartRef.destroy();\r\n      this.legendsChange.emit([]);\r\n    }\r\n\r\n    const chartElement: HTMLCanvasElement = this.chart().nativeElement;\r\n    const chartConfig: ChartConfiguration<'line'> = this.getChartConfig(test);\r\n    this.chartRef = new Chart(chartElement, chartConfig);\r\n\r\n    const chartData: ChartData = this.chartRef!.data;\r\n    const legends: DashboardWorkingChartLegend[] = chartData.datasets.map(\r\n      (chartDataItem: ChartDataset): DashboardWorkingChartLegend => ({\r\n        color: chartDataItem.borderColor as string,\r\n        label: chartDataItem.label!\r\n      })\r\n    );\r\n\r\n    this.legendsChange.emit(legends);\r\n  }\r\n\r\n  private getChartConfig(test: any[]): ChartConfiguration<'line'> {\r\n    return createDashboardWorkingCapitalChartConfig(test);\r\n  }\r\n}\r\n",
            "styleUrl": "./dashboard-working-capital-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"content\">\r\n  <canvas #chart class=\"content__chart\"></canvas>\r\n</div>\r\n"
        },
        {
            "name": "DashboardWorkingCapitalComponent",
            "id": "component-DashboardWorkingCapitalComponent-bcf4cc5c3d4b12784c040802fef6a95632ace697157ff404a305223fc1b1a3bb6e3bb4efd937f2e8a61f23cc7065fb6bf6d856687cb5a3acc80efe5dbf1db865",
            "file": "src/app/features/dashboard/components/dashboard-working-capital/dashboard-working-capital.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-working-capital",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard-working-capital.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cards",
                    "defaultValue": "input<Option[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Option[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "datasets",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<any[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "filterForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isWorkingCapitalLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "legends",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<DashboardWorkingChartLegend[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "TIME_RANGE",
                    "defaultValue": "TIME_RANGE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getWorkingCapital",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal,\r\n  OnInit,\r\n  signal,\r\n  WritableSignal\r\n} from '@angular/core';\r\nimport { TIME_RANGE } from '../../../../shared/constants/time-range.constant';\r\nimport { DropdownItem } from '../../../../shared/interfaces/dropdown.interface';\r\nimport { TimeRange } from '../../../../shared/enums/time-range.enum';\r\nimport { delay, finalize, of } from 'rxjs';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Option } from '../../../../shared/interfaces/option.interface';\r\nimport { DashboardWorkingChartLegend } from '../../interfaces/dashboard-working-capital-chart.interface';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-working-capital',\r\n  templateUrl: './dashboard-working-capital.component.html',\r\n  styleUrl: './dashboard-working-capital.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DashboardWorkingCapitalComponent implements OnInit, AfterViewInit {\r\n  filterForm!: FormGroup;\r\n\r\n  cards: InputSignal<Option[]> = input<Option[]>([]);\r\n  datasets: WritableSignal<any[]> = signal([]);\r\n  legends: WritableSignal<DashboardWorkingChartLegend[]> = signal([]);\r\n\r\n  isWorkingCapitalLoading: WritableSignal<boolean> = signal(false);\r\n\r\n  protected readonly TIME_RANGE: DropdownItem[] = TIME_RANGE;\r\n\r\n  constructor(private formBuilder: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.getWorkingCapital(this.filterForm.value);\r\n  }\r\n\r\n  private getWorkingCapital(params: any): void {\r\n    this.isWorkingCapitalLoading.set(true);\r\n\r\n    of(params)\r\n      .pipe(delay(2000))\r\n      .pipe(finalize(() => this.isWorkingCapitalLoading.set(false)))\r\n      .subscribe({\r\n        next: (data) => {\r\n          this.datasets.set([\r\n            132, 224, 133, 233, 142, 345, 341, 334, 46, 35, 435\r\n          ]);\r\n          // console.log('test', data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private initForm(): void {\r\n    this.filterForm = this.formBuilder.group({\r\n      card: ['', Validators.required],\r\n      range: [TimeRange.LastYear, Validators.required]\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./dashboard-working-capital.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n    <h3 class=\"header__title\">Working Capital</h3>\r\n\r\n    <ul class=\"header__legends legends\">\r\n      @for (legend of legends(); track $index) {\r\n        <li class=\"legends__item legend\">\r\n          <span\r\n            class=\"legend__color\"\r\n            [ngStyle]=\"{ backgroundColor: legend.color }\"\r\n          ></span>\r\n          <div class=\"legend__label\">{{ legend.label }}</div>\r\n        </li>\r\n      }\r\n    </ul>\r\n\r\n    <form [formGroup]=\"filterForm\" class=\"header__form\">\r\n      <app-dropdown\r\n        formControlName=\"card\"\r\n        placeholder=\"Select Card\"\r\n        queryControl=\"working_capital_card\"\r\n        [loading]=\"isWorkingCapitalLoading()\"\r\n        [options]=\"cards()\"\r\n      />\r\n\r\n      <app-dropdown\r\n        formControlName=\"range\"\r\n        queryControl=\"working_capital_range\"\r\n        [options]=\"TIME_RANGE\"\r\n      />\r\n    </form>\r\n  </div>\r\n  <div\r\n    class=\"content\"\r\n    *skeleton=\"isWorkingCapitalLoading(); width: '100%'; height: '250px'\"\r\n  >\r\n    <app-dashboard-working-capital-chart [(legends)]=\"legends\" />\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-545728c0a38dff7fda6bc33b48b4801ee0c21406b3de6d82a5df18e653b38f2e81412de44cd6004d35c3fdba77b78c1462e0e26fe1f31ce1803e14e0ab958e11",
            "file": "src/app/shared/components/controllers/date-picker/date-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DatePickerComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isWeekendDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "isCalendarOpen",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isWeekendDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "required": false
                },
                {
                    "name": "maxDate",
                    "defaultValue": "input<Date>(new Date(Infinity))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Date>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "minDate",
                    "defaultValue": "input<Date>(new Date(0))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Date>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "month",
                    "defaultValue": "signal<number>(this.currentDate.getMonth())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "MONTHS",
                    "defaultValue": "MONTHS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 177,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 178,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<[][]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input<string>('Select Date')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "selectedDate",
                    "defaultValue": "signal<Date | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Date | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "WEEK_DAYS",
                    "defaultValue": "WEEK_DAYS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "year",
                    "defaultValue": "signal<number>(this.currentDate.getFullYear())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "closeCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDates",
                    "args": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DatePickerOption[]",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDaysOptions",
                    "args": [
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dayMonth",
                            "type": "DatePickerDayMonth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DatePickerDayMonth.Current"
                        }
                    ],
                    "optional": false,
                    "returnType": "DatePickerOption[]",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dayMonth",
                            "type": "DatePickerDayMonth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DatePickerDayMonth.Current",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupedDates",
                    "args": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDateClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "DatePickerOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "DatePickerOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNextClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPrevClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "outsideValue",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "outsideValue",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CdkConnectedOverlay"
                },
                {
                    "name": "CdkOverlayOrigin"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  input,\r\n  InputSignal,\r\n  OnInit,\r\n  signal,\r\n  WritableSignal\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule\r\n} from '@angular/forms';\r\nimport { DatePipe, NgClass } from '@angular/common';\r\nimport { DatePickerOption } from '../../../interfaces/date-picker.interface';\r\nimport { DatePickerDayMonth } from '../../../enums/date-picker.enum';\r\nimport { chunkArray } from '../../../utils/chunk.util';\r\nimport { MONTHS, WEEK_DAYS } from '../../../constants/date-picker.constant';\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';\r\n\r\n@Component({\r\n  selector: 'app-date-picker',\r\n  imports: [\r\n    DatePipe,\r\n    NgClass,\r\n    ReactiveFormsModule,\r\n    CdkConnectedOverlay,\r\n    CdkOverlayOrigin\r\n  ],\r\n  templateUrl: './date-picker.component.html',\r\n  styleUrl: './date-picker.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => DatePickerComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DatePickerComponent implements OnInit, ControlValueAccessor {\r\n  protected readonly currentDate: Date = new Date();\r\n  protected readonly MONTHS: string[] = MONTHS;\r\n  protected readonly WEEK_DAYS: string[] = WEEK_DAYS;\r\n\r\n  minDate: InputSignal<Date> = input<Date>(new Date(0));\r\n  maxDate: InputSignal<Date> = input<Date>(new Date(Infinity));\r\n  placeholder: InputSignal<string> = input<string>('Select Date');\r\n  isWeekendDisabled: InputSignal<boolean> = input<boolean>(false);\r\n\r\n  year: WritableSignal<number> = signal<number>(this.currentDate.getFullYear());\r\n  month: WritableSignal<number> = signal<number>(this.currentDate.getMonth());\r\n  options: WritableSignal<DatePickerOption[][]> = signal([]);\r\n  selectedDate: WritableSignal<Date | null> = signal<Date | null>(null);\r\n\r\n  // State\r\n  isCalendarOpen: WritableSignal<boolean> = signal<boolean>(false);\r\n  isDisabled: WritableSignal<boolean> = signal<boolean>(false);\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.updateOptions();\r\n  }\r\n\r\n  onDateClick(option: DatePickerOption): void {\r\n    if (option.dayMonth === DatePickerDayMonth.Current) {\r\n      this.selectedDate.set(option.date);\r\n      this.onChange(option.date);\r\n      this.closeCalendar();\r\n    } else if (option.dayMonth === DatePickerDayMonth.Previous) {\r\n      this.onPrevClick();\r\n    } else if (option.dayMonth === DatePickerDayMonth.Next) {\r\n      this.onNextClick();\r\n    }\r\n\r\n    this.onTouch();\r\n  }\r\n\r\n  onPrevClick() {\r\n    this.month.update((month: number) => (month === 0 ? 11 : month - 1));\r\n    this.year.update((year: number) => (this.month() === 11 ? year - 1 : year));\r\n    this.updateOptions();\r\n  }\r\n\r\n  onNextClick() {\r\n    this.month.update((month: number) => (month === 11 ? 0 : month + 1));\r\n    this.year.update((year: number) => (this.month() === 0 ? year + 1 : year));\r\n    this.updateOptions();\r\n  }\r\n\r\n  toggleOpen() {\r\n    this.isCalendarOpen.update((isCalendarOpen: boolean) => !isCalendarOpen);\r\n  }\r\n\r\n  closeCalendar() {\r\n    this.isCalendarOpen.set(false);\r\n  }\r\n\r\n  private updateOptions() {\r\n    const options: DatePickerOption[][] = this.getGroupedDates(\r\n      this.month(),\r\n      this.year()\r\n    );\r\n\r\n    this.options.set(options);\r\n  }\r\n\r\n  private getGroupedDates(month: number, year: number): DatePickerOption[][] {\r\n    const dates: DatePickerOption[] = this.getDates(month, year);\r\n    return chunkArray<DatePickerOption>(dates, 7);\r\n  }\r\n\r\n  private getDates(month: number, year: number): DatePickerOption[] {\r\n    const previousMonthEnd = new Date(year, month, 0);\r\n    const currentMonthStart: Date = new Date(year, month, 1);\r\n    const currentMonthEnd: Date = new Date(year, month + 1, 0);\r\n\r\n    const previousMonthLastDate: number = previousMonthEnd.getDate();\r\n    const currentMonthLastDay: number = currentMonthEnd.getDay();\r\n    const currentMonthFirstDay: number = currentMonthStart.getDay();\r\n    const currentMonthLastDate: number = currentMonthEnd.getDate();\r\n\r\n    const prevMonth: number = this.month() === 0 ? 11 : month - 1;\r\n    const prevYear: number = prevMonth === 11 ? this.year() - 1 : this.year();\r\n    const previousMonthDays: DatePickerOption[] =\r\n      currentMonthFirstDay === 0\r\n        ? []\r\n        : this.getDaysOptions(\r\n            previousMonthLastDate + 1 - currentMonthFirstDay,\r\n            previousMonthLastDate + 1,\r\n            prevMonth,\r\n            prevYear,\r\n            DatePickerDayMonth.Previous\r\n          );\r\n\r\n    const currentMonthDays: DatePickerOption[] = this.getDaysOptions(\r\n      1,\r\n      currentMonthLastDate + 1,\r\n      this.month(),\r\n      this.year(),\r\n      DatePickerDayMonth.Current\r\n    );\r\n\r\n    const nextMonth: number = this.month() === 11 ? 0 : month + 1;\r\n    const nextYear: number = nextMonth === 0 ? this.year() + 1 : this.year();\r\n    const nextMonthDays: DatePickerOption[] = this.getDaysOptions(\r\n      1,\r\n      7 - currentMonthLastDay,\r\n      nextMonth,\r\n      nextYear,\r\n      DatePickerDayMonth.Next\r\n    );\r\n\r\n    return [...previousMonthDays, ...currentMonthDays, ...nextMonthDays];\r\n  }\r\n\r\n  private getDaysOptions(\r\n    from: number,\r\n    to: number,\r\n    month: number,\r\n    year: number,\r\n    dayMonth: DatePickerDayMonth = DatePickerDayMonth.Current\r\n  ): DatePickerOption[] {\r\n    const result: DatePickerOption[] = [];\r\n\r\n    for (let day: number = from; day < to; day++) {\r\n      result.push({ date: new Date(year, month, day), dayMonth });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // Value Accessor Functions\r\n  private onChange = (value: Date | unknown) => {};\r\n  private onTouch = () => {};\r\n\r\n  registerOnChange(fn: (value: unknown) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled.set(isDisabled);\r\n  }\r\n\r\n  writeValue(outsideValue: Date | null): void {\r\n    this.selectedDate.set(outsideValue);\r\n  }\r\n}\r\n",
            "styleUrl": "./date-picker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 60
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"date-picker\">\r\n  <button\r\n    cdkOverlayOrigin\r\n    class=\"date-picker__button\"\r\n    #trigger=\"cdkOverlayOrigin\"\r\n    (click)=\"toggleOpen()\"\r\n  >\r\n    <span class=\"date-picker__button_icon\"></span>\r\n    @if (selectedDate()) {\r\n      {{ selectedDate() | date: 'dd MMM YYYY' }}\r\n    } @else {\r\n      {{ placeholder() }}\r\n    }\r\n  </button>\r\n\r\n  <ng-template\r\n    cdkConnectedOverlay\r\n    [cdkConnectedOverlayOrigin]=\"trigger\"\r\n    [cdkConnectedOverlayOpen]=\"isCalendarOpen()\"\r\n    (overlayOutsideClick)=\"closeCalendar()\"\r\n  >\r\n    <div class=\"date-picker__dropdown dropdown\">\r\n      <div class=\"dropdown__header\">\r\n        <button\r\n          class=\"dropdown__header_arrow dropdown__header_arrow--left\"\r\n          (click)=\"onPrevClick()\"\r\n        >\r\n          <i class=\"icon icon-chevron\"></i>\r\n        </button>\r\n\r\n        <div class=\"calendar__header_period period\">\r\n          <span class=\"period__month\">{{ MONTHS[month()] }}</span>\r\n          <span class=\"period__year\">{{ year() }}</span>\r\n        </div>\r\n\r\n        <button\r\n          class=\"dropdown__header_arrow dropdown__header_arrow--right\"\r\n          (click)=\"onNextClick()\"\r\n        >\r\n          <i class=\"icon icon-chevron\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"dropdown__content\">\r\n        <div class=\"dropdown__content_week-days week-days\">\r\n          <div class=\"week-days__content\">\r\n            @for (weekDay of WEEK_DAYS; track $index) {\r\n              <span class=\"week-days__content_label\">{{ weekDay }}</span>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"dropdown__content_calendar calendar\">\r\n          <div class=\"calendar__content\">\r\n            @for (week of options(); track $index) {\r\n              <div class=\"calendar__content_week\">\r\n                @for (dayOption of week; track $index) {\r\n                  <button\r\n                    class=\"calendar__content_day\"\r\n                    [ngClass]=\"[dayOption.dayMonth]\"\r\n                    (click)=\"onDateClick(dayOption)\"\r\n                  >\r\n                    <span class=\"calendar__content_day_label\">\r\n                      {{ dayOption.date | date: 'dd' }}\r\n                    </span>\r\n                  </button>\r\n                }\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-2c95d140d39b462f85ca61ada04c28c4cda2e3a575ec2f361bd103f59a377cc85bc08191f44b17e7af7c91727f1160b117828f4fe1a2fcbcfd5437bc20c6ff5d",
            "file": "src/app/shared/components/controllers/dropdown/dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DropdownComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "empty",
                    "defaultValue": "input('No Options')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isOpen",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "optionLabelName",
                    "defaultValue": "input('label')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "options",
                    "defaultValue": "input.required<T[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<T[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "optionValueName",
                    "defaultValue": "input<string | null>('id')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input('Select')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectedOptionIndex",
                    "defaultValue": "signal<number>(-1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOptionIndexByOutsideValue",
                    "args": [
                        {
                            "name": "outsideValue",
                            "type": "T | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.options()"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "outsideValue",
                            "type": "T | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.options()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectOption",
                    "args": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | ",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | ",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdownOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "outsideValue",
                            "type": "T | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "outsideValue",
                            "type": "T | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CdkOverlayOrigin"
                },
                {
                    "name": "CdkConnectedOverlay"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  input,\r\n  InputSignal,\r\n  signal,\r\n  WritableSignal\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport { DropdownItem } from '../../../interfaces/dropdown.interface';\r\n\r\n@Component({\r\n  selector: 'app-dropdown',\r\n  imports: [CdkOverlayOrigin, CdkConnectedOverlay],\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrl: './dropdown.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => DropdownComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DropdownComponent<T extends DropdownItem>\r\n  implements ControlValueAccessor\r\n{\r\n  options: InputSignal<T[]> = input.required<T[]>();\r\n  optionValueName: InputSignal<string | null> = input<string | null>('id'); // Empty if Need Object As Value\r\n  optionLabelName: InputSignal<string> = input('label');\r\n  loading: InputSignal<boolean> = input(false);\r\n\r\n  empty: InputSignal<string> = input('No Options');\r\n  placeholder: InputSignal<string> = input('Select');\r\n\r\n  selectedOptionIndex: WritableSignal<number> = signal<number>(-1);\r\n  isOpen: WritableSignal<boolean> = signal<boolean>(false);\r\n  isDisabled: WritableSignal<boolean> = signal<boolean>(false);\r\n\r\n  onSelectOption(optionIndex: number): void {\r\n    this.selectedOptionIndex.set(optionIndex);\r\n    this.isOpen.set(false);\r\n\r\n    if (this.optionValueName() == null) {\r\n      this.onChange(this.options()[optionIndex]);\r\n    } else {\r\n      this.onChange(this.options()[optionIndex][this.optionValueName()!]);\r\n    }\r\n\r\n    this.onTouched();\r\n  }\r\n\r\n  // DropDown Open/Close\r\n  toggleDropdownOpen(): void {\r\n    this.isOpen.update((isOpen: boolean): boolean => !isOpen);\r\n  }\r\n\r\n  closeDropdown(): void {\r\n    this.isOpen.set(false);\r\n  }\r\n\r\n  // Value Accessor Functions\r\n  private onChange = (value: T | unknown) => {};\r\n  private onTouched = () => {};\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled.set(isDisabled);\r\n  }\r\n\r\n  registerOnChange(fn: (value: T | unknown) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  writeValue(outsideValue: T | string): void {\r\n    this.selectedOptionIndex.set(\r\n      this.getOptionIndexByOutsideValue(outsideValue)\r\n    );\r\n  }\r\n\r\n  private getOptionIndexByOutsideValue(\r\n    outsideValue: T | string,\r\n    options: T[] = this.options()\r\n  ): number {\r\n    if (outsideValue == null) {\r\n      return -1;\r\n    }\r\n\r\n    if (typeof outsideValue == 'object') {\r\n      const stringifiedOutsideValue: string = JSON.stringify(outsideValue);\r\n\r\n      return options.findIndex((option: T): boolean => {\r\n        return JSON.stringify(option) === stringifiedOutsideValue;\r\n      });\r\n    } else {\r\n      const optionValueName: string | null = this.optionValueName();\r\n      if (optionValueName == null) {\r\n        return -1;\r\n      }\r\n\r\n      return options.findIndex((option: T): boolean => {\r\n        return option[optionValueName] === outsideValue;\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./dropdown.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "@let selectedOption = options()[selectedOptionIndex()];\r\n@let selectedOptionLabel = selectedOption && selectedOption[optionLabelName()];\r\n\r\n@let dropdownButtonWidth = trigger.elementRef.nativeElement.offsetWidth;\r\n\r\n<div class=\"dropdown\">\r\n  <!-- DropDown Button -->\r\n  <button\r\n    cdkOverlayOrigin\r\n    #trigger=\"cdkOverlayOrigin\"\r\n    class=\"dropdown__button\"\r\n    [class.opened]=\"isOpen()\"\r\n    [disabled]=\"isDisabled()\"\r\n    (click)=\"toggleDropdownOpen()\"\r\n  >\r\n    <span\r\n      class=\"dropdown__button_name\"\r\n      [class.placeholder]=\"!selectedOptionLabel\"\r\n    >\r\n      {{ selectedOptionLabel || placeholder() }}\r\n    </span>\r\n\r\n    <i class=\"dropdown__button_icon icon icon-chevron\"></i>\r\n  </button>\r\n\r\n  <!-- DropDown Options -->\r\n  <ng-template\r\n    cdkConnectedOverlay\r\n    [cdkConnectedOverlayOpen]=\"isOpen()\"\r\n    [cdkConnectedOverlayOrigin]=\"trigger\"\r\n    [cdkConnectedOverlayWidth]=\"dropdownButtonWidth\"\r\n    (overlayOutsideClick)=\"closeDropdown()\"\r\n  >\r\n    <ul class=\"dropdown__options\">\r\n      @for (option of options(); track $index) {\r\n        @let isActive = selectedOptionIndex() === $index;\r\n\r\n        <li\r\n          class=\"dropdown__options_item option\"\r\n          [class.active]=\"isActive\"\r\n          (click)=\"onSelectOption($index)\"\r\n        >\r\n          {{ option[optionLabelName()] }}\r\n        </li>\r\n      }\r\n\r\n      @if (options().length === 0) {\r\n        <li class=\"dropdown__options_item empty\">{{ empty() }}</li>\r\n      }\r\n    </ul>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "HorizontalTabsComponent",
            "id": "component-HorizontalTabsComponent-4955b4e82cee12e7d757eb83b244993a3448386b724d6e5b515a35a5787e20db74e446daacdd875957b96ff9a4c478fe330de942265d9614e2f929cda95c1d87",
            "file": "src/app/shared/components/tabs/horizontal-tabs/horizontal-tabs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horizontal-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./horizontal-tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "defaultValue": "input.required<HorizontalTab[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<HorizontalTab[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { HorizontalTab } from '../../../interfaces/horizontal-tab.interface';\r\n\r\n@Component({\r\n  selector: 'app-horizontal-tabs',\r\n  imports: [RouterLinkActive, RouterLink],\r\n  templateUrl: './horizontal-tabs.component.html',\r\n  styleUrl: './horizontal-tabs.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HorizontalTabsComponent {\r\n  tabs: InputSignal<HorizontalTab[]> = input.required<HorizontalTab[]>();\r\n}\r\n",
            "styleUrl": "./horizontal-tabs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for (tab of tabs(); track tab.routerLink) {\r\n  <div class=\"tab\">\r\n    <a\r\n      class=\"tab__link\"\r\n      routerLinkActive=\"active\"\r\n      [routerLink]=\"tab.routerLink\"\r\n    >\r\n      <span class=\"tab__link_text\">{{ tab.label }}</span>\r\n    </a>\r\n  </div>\r\n}\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-c2de00d3272ae13d2e45154fadcb1bd46072abaedf59437e6f432631612b93cbab5fc99b682c5f271f2cb6ca14a9b7e08e9fde8584f787e05f00e3d03371e95d",
            "file": "src/app/shared/components/controllers/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "required": false
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "input<InputIconPosition>(\r\n    InputIconPosition.Left\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<InputIconPosition>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "label",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "textPosition",
                    "defaultValue": "input<InputTextPosition>(\r\n    InputTextPosition.Left\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<InputTextPosition>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "type",
                    "defaultValue": "input<string>('text')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "value",
                    "defaultValue": "signal<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  input,\r\n  InputSignal,\r\n  signal,\r\n  WritableSignal\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule\r\n} from '@angular/forms';\r\nimport { NgClass } from '@angular/common';\r\nimport {\r\n  InputIconPosition,\r\n  InputTextPosition\r\n} from '../../../enums/input.enum';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  imports: [ReactiveFormsModule, NgClass, FormsModule],\r\n  templateUrl: './input.component.html',\r\n  styleUrl: './input.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InputComponent implements ControlValueAccessor {\r\n  textPosition: InputSignal<InputTextPosition> = input<InputTextPosition>(\r\n    InputTextPosition.Left\r\n  );\r\n  iconPosition: InputSignal<InputIconPosition> = input<InputIconPosition>(\r\n    InputIconPosition.Left\r\n  );\r\n\r\n  type: InputSignal<string> = input<string>('text');\r\n  icon: InputSignal<string | undefined> = input<string>();\r\n  label: InputSignal<string> = input<string>('');\r\n  placeholder: InputSignal<string> = input<string>('');\r\n\r\n  value: WritableSignal<string> = signal<string>('');\r\n  isDisabled: WritableSignal<boolean> = signal<boolean>(false);\r\n\r\n  onValueChange(value: string) {\r\n    this.value.set(value);\r\n    this.onChange(value);\r\n  }\r\n\r\n  onBlur(): void {\r\n    this.onTouched();\r\n  }\r\n\r\n  // Value Accessor Functions\r\n  private onChange = (value: string) => {};\r\n  private onTouched = () => {};\r\n\r\n  registerOnChange(fn: (value: string) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled.set(isDisabled);\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    this.value.set(value);\r\n  }\r\n}\r\n",
            "styleUrl": "./input.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<label class=\"label\">\r\n  @if (label()) {\r\n    <span class=\"label__name\">{{ label() }}</span>\r\n  }\r\n\r\n  <span\r\n    class=\"label__input\"\r\n    [class]=\"[icon() ? 'icon--' + iconPosition() : '']\"\r\n  >\r\n    @if (icon()) {\r\n      <i class=\"label__input_icon\" [ngClass]=\"[icon()]\"></i>\r\n    }\r\n\r\n    <!-- TODO: Safari fix -->\r\n    <input\r\n      class=\"label__input_control\"\r\n      [class]=\"[textPosition() ? 'text-position--' + textPosition() : '']\"\r\n      [type]=\"type()\"\r\n      [placeholder]=\"placeholder()\"\r\n      [disabled]=\"isDisabled()\"\r\n      [ngModel]=\"value()\"\r\n      (ngModelChange)=\"onValueChange($event)\"\r\n      (blur)=\"onBlur()\"\r\n    />\r\n  </span>\r\n</label>\r\n"
        },
        {
            "name": "InputPasswordComponent",
            "id": "component-InputPasswordComponent-1651dda12015cfc524d55f8d143cfdd6e55007b35443d0a42d80930a4580e5bcff05d82c482c164ceee27d46f9a312e5cffcf9a648c9243135ef04094f6c6c85",
            "file": "src/app/shared/components/controllers/input-password/input-password.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputPasswordComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonStyle",
                    "defaultValue": "ButtonStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonType",
                    "defaultValue": "ButtonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "isVisible",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "label",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "value",
                    "defaultValue": "signal<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleVisible",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  input,\r\n  InputSignal,\r\n  signal,\r\n  WritableSignal\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule\r\n} from '@angular/forms';\r\nimport { ButtonComponent } from '../../button/button.component';\r\nimport {\r\n  ButtonSeverity,\r\n  ButtonStyle,\r\n  ButtonType\r\n} from '../../../enums/button.enum';\r\n\r\n@Component({\r\n  selector: 'app-input-password',\r\n  imports: [ReactiveFormsModule, ButtonComponent, FormsModule],\r\n  templateUrl: './input-password.component.html',\r\n  styleUrl: './input-password.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputPasswordComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InputPasswordComponent implements ControlValueAccessor {\r\n  label: InputSignal<string> = input<string>('');\r\n  placeholder: InputSignal<string> = input<string>('');\r\n\r\n  value: WritableSignal<string> = signal<string>('');\r\n  isVisible: WritableSignal<boolean> = signal<boolean>(false);\r\n  isDisabled: WritableSignal<boolean> = signal<boolean>(false);\r\n\r\n  protected readonly ButtonStyle = ButtonStyle;\r\n  protected readonly ButtonSeverity = ButtonSeverity;\r\n  protected readonly ButtonType = ButtonType;\r\n\r\n  toggleVisible(event: Event) {\r\n    event.stopPropagation();\r\n    this.isVisible.set(!this.isVisible());\r\n  }\r\n\r\n  onValueChange(value: string) {\r\n    this.value.set(value);\r\n    this.onChange(value);\r\n  }\r\n\r\n  onBlur(): void {\r\n    this.onTouched();\r\n  }\r\n\r\n  // Value Accessor Functions\r\n  private onChange = (value: string) => {};\r\n  private onTouched = () => {};\r\n\r\n  registerOnChange(fn: (value: string) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled.set(isDisabled);\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    this.value.set(value);\r\n  }\r\n}\r\n",
            "styleUrl": "./input-password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<label class=\"label\">\r\n  @if (label()) {\r\n    <span class=\"label__name\">{{ label() }}</span>\r\n  }\r\n\r\n  <span class=\"label__input\">\r\n    <input\r\n      class=\"label__input_control\"\r\n      [type]=\"isVisible() ? 'text' : 'password'\"\r\n      [placeholder]=\"placeholder()\"\r\n      [disabled]=\"isDisabled()\"\r\n      [ngModel]=\"value()\"\r\n      (ngModelChange)=\"onValueChange($event)\"\r\n      (blur)=\"onBlur()\"\r\n    />\r\n\r\n    <app-button\r\n      class=\"label__input_toggle-visible\"\r\n      [icon]=\"['icon', isVisible() ? 'icon-eye-off' : 'icon-eye']\"\r\n      [type]=\"ButtonType.Button\"\r\n      [style]=\"ButtonStyle.Icon\"\r\n      [severity]=\"ButtonSeverity.Secondary\"\r\n      (click)=\"toggleVisible($event)\"\r\n    />\r\n  </span>\r\n</label>\r\n"
        },
        {
            "name": "InvoicesClientCardComponent",
            "id": "component-InvoicesClientCardComponent-f31c7ded89e5612a4c4aa5ed71d8d78b0159a2ad017eae35b936ece05a772fead215c11bcd222691b0a5364a68af17020bceb3c51f2a9331fe5e3634b5dec05e",
            "file": "src/app/features/invoices/components/invoices-client-card/invoices-client-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoices-client-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./invoices-client-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonSize",
                    "defaultValue": "ButtonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport {\r\n  ButtonSeverity,\r\n  ButtonSize\r\n} from '../../../../shared/enums/button.enum';\r\n\r\n@Component({\r\n  selector: 'app-invoices-client-card',\r\n  standalone: false,\r\n  templateUrl: './invoices-client-card.component.html',\r\n  styleUrl: './invoices-client-card.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InvoicesClientCardComponent {\r\n  protected readonly ButtonSeverity = ButtonSeverity;\r\n  protected readonly ButtonSize = ButtonSize;\r\n}\r\n",
            "styleUrl": "./invoices-client-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"client\">\r\n  <div class=\"client__header\">\r\n    <h5 class=\"client__header_title\">Client Details</h5>\r\n    <span class=\"client__header_change\">Change</span>\r\n  </div>\r\n\r\n  <div class=\"client__user client-user\">\r\n    <div class=\"client-user__avatar\">\r\n      <img\r\n        class=\"client-user__avatar_img\"\r\n        src=\"https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\"\r\n        alt=\"client avatar\"\r\n      />\r\n    </div>\r\n    <div class=\"client-user__info\">\r\n      <span class=\"client-user__info_name\">Sajib Rahman</span>\r\n      <a class=\"client-user__info_email\" href=\"mailto:rahmansajib@uihut.com\">\r\n        {{ 'rahmansajib@uihut.com' }}\r\n      </a>\r\n    </div>\r\n  </div>\r\n\r\n  <hr class=\"client__divider\" />\r\n\r\n  <div class=\"client__company client-company\">\r\n    <span class=\"client-company__name\">\r\n      UIHUT Agency LTD\r\n\r\n      <span class=\"icon icon-verify\"></span>\r\n    </span>\r\n    <span class=\"client-company__address\">\r\n      3471 Rainy Day Drive Tulsa, USA\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"client__add\">\r\n    <app-button [size]=\"ButtonSize.Wide\" [severity]=\"ButtonSeverity.Success\">\r\n      Add Customer\r\n    </app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "InvoicesCreatePageComponent",
            "id": "component-InvoicesCreatePageComponent-af581794f3048a9c9053d92d2d6babbc2c1de21791930b64e28b6b32b9f06837efc2b9623e4c7b25b38c4c19c00d8b7b441745b483c432030dabe852063344c6",
            "file": "src/app/features/invoices/pages/invoices-create-page/invoices-create-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoices-create-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./invoices-create-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "InputTextPosition",
                    "defaultValue": "InputTextPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "invoiceForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addInvoiceItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "InvoicesItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "InvoicesItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeInvoiceItem",
                    "args": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component\r\n} from '@angular/core';\r\nimport { ButtonSeverity } from '../../../../shared/enums/button.enum';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n  InvoicesItem,\r\n  InvoicesItemGroup\r\n} from '../../interfaces/invoices-items.interface';\r\nimport { InputTextPosition } from '../../../../shared/enums/input.enum';\r\n\r\n@Component({\r\n  selector: 'app-invoices-create-page',\r\n  standalone: false,\r\n  templateUrl: './invoices-create-page.component.html',\r\n  styleUrl: './invoices-create-page.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InvoicesCreatePageComponent {\r\n  protected invoiceForm: FormGroup;\r\n\r\n  protected readonly ButtonSeverity = ButtonSeverity;\r\n  protected readonly InputTextPosition = InputTextPosition;\r\n\r\n  protected get invoiceItems(): FormArray<FormGroup<InvoicesItemGroup>> {\r\n    return this.invoiceForm.get('items') as FormArray<FormGroup>;\r\n  }\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    this.invoiceForm = this.formBuilder.group({\r\n      customerId: this.formBuilder.control(null, [Validators.required]),\r\n      invoiceDate: this.formBuilder.control(null, [Validators.required]),\r\n      dueDate: this.formBuilder.control(null, [Validators.required]),\r\n\r\n      discount: this.formBuilder.control(null, [Validators.required]),\r\n      subtotal: this.formBuilder.control(null, [Validators.required]),\r\n      tax: this.formBuilder.control(null, [Validators.required]),\r\n\r\n      items: this.formBuilder.array<InvoicesItemGroup>([])\r\n    });\r\n  }\r\n\r\n  addInvoiceItem(item?: InvoicesItem) {\r\n    const invoiceItem = this.formBuilder.group<InvoicesItemGroup>({\r\n      name: this.formBuilder.control(item?.name || '', [\r\n        Validators.required,\r\n        Validators.minLength(3)\r\n      ]),\r\n      quantity: this.formBuilder.control(item?.quantity || 0, [\r\n        Validators.required,\r\n        Validators.min(1)\r\n      ]),\r\n      rate: this.formBuilder.control(item?.rate || 0, [Validators.required]),\r\n      total: this.formBuilder.control(\r\n        { value: item?.total || 0, disabled: true },\r\n        [Validators.required]\r\n      )\r\n    });\r\n\r\n    this.invoiceItems.push(invoiceItem);\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  removeInvoiceItem(itemIndex: number) {\r\n    this.invoiceItems.removeAt(itemIndex);\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n}\r\n",
            "styleUrl": "./invoices-create-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "invoiceItems": {
                    "name": "invoiceItems",
                    "getSignature": {
                        "name": "invoiceItems",
                        "type": "",
                        "returnType": "FormArray<FormGroup<InvoicesItemGroup>>",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n  <form [formGroup]=\"invoiceForm\" class=\"form\">\r\n    <div class=\"form__invoice-items\">\r\n      <table class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th class=\"table__header_item\">Item</th>\r\n            <th class=\"centered\">Quantity</th>\r\n            <th class=\"centered\">Rate</th>\r\n            <th class=\"centered\">Amount</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          @for (invoiceItem of invoiceItems.controls; track $index) {\r\n            <ng-container [formGroup]=\"invoiceItem\">\r\n              <tr>\r\n                <td>\r\n                  <app-input\r\n                    formControlName=\"name\"\r\n                    placeholder=\"Enter Item Name\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <app-input\r\n                    formControlName=\"quantity\"\r\n                    type=\"number\"\r\n                    placeholder=\"Enter Quantity\"\r\n                    [textPosition]=\"InputTextPosition.Center\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <app-input\r\n                    formControlName=\"rate\"\r\n                    type=\"number\"\r\n                    placeholder=\"Enter Rate\"\r\n                    [textPosition]=\"InputTextPosition.Center\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <app-input\r\n                    formControlName=\"total\"\r\n                    type=\"number\"\r\n                    placeholder=\"Auto Calculate\"\r\n                    [textPosition]=\"InputTextPosition.Center\"\r\n                  />\r\n                </td>\r\n              </tr>\r\n            </ng-container>\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    {{ invoiceForm.getRawValue() | json }}\r\n\r\n    <button (click)=\"addInvoiceItem()\">asdsad</button>\r\n\r\n    <app-invoices-client-card />\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "InvoicesPageComponent",
            "id": "component-InvoicesPageComponent-2ff2be427a84b5289f11b3e1cfa9db6e2b37cbcf210b4f140356ba12daf5d91729640d1314f7b8dc1779cc20ff5e95fb563c1cf42870555ac9e34e575e815340",
            "file": "src/app/features/invoices/pages/invoices-page/invoices-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoices-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./invoices-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-invoices-page',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './invoices-page.component.html',\r\n  styleUrl: './invoices-page.component.scss'\r\n})\r\nexport class InvoicesPageComponent {}\r\n",
            "styleUrl": "./invoices-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>invoices-page works!</p>\r\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-1ecada64007991aaaa20af42f10df6a32ca208be2c9a09b388012da311c12fa173eed6170cbcb0f9f5ed1e161e2250e08fe2787f410be94a87e0d4a4c02ece1e",
            "file": "src/app/shared/components/link/link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-link",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showChevron",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "link",
                    "defaultValue": "input<string | string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | []>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showChevron",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-link',\r\n  imports: [RouterLink],\r\n  templateUrl: './link.component.html',\r\n  styleUrl: './link.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LinkComponent {\r\n  link: InputSignal<string | string[]> = input<string | string[]>([]);\r\n  showChevron: InputSignal<boolean> = input<boolean>(true);\r\n}\r\n",
            "styleUrl": "./link.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a [routerLink]=\"link()\" class=\"link\">\r\n  <span class=\"link__text\"><ng-content /></span>\r\n\r\n  @if (showChevron()) {\r\n    <span class=\"icon icon-chevron\"></span>\r\n  }\r\n</a>\r\n"
        },
        {
            "name": "MultiDropdownComponent",
            "id": "component-MultiDropdownComponent-eeca3cbcd8d9ac5c16a188b7163ea4b283224c8b3a5e341f69a2d44617a1c7586b259e25af59fad6038f1b7724be0ebd56a89ae93a46f4816689b54dc35b0711",
            "file": "src/app/shared/components/controllers/multi-dropdown/multi-dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MultiDropdownComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-multi-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./multi-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "countVisibleSelectedOptions",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "required": false
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "countVisibleSelectedOptions",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "required": false
                },
                {
                    "name": "empty",
                    "defaultValue": "input<string>('No Options')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isOpen",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "required": false
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "optionLabelName",
                    "defaultValue": "input('label')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "options",
                    "defaultValue": "input.required<T[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<T[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "optionValueName",
                    "defaultValue": "input<string | null>('id')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "placeholder",
                    "defaultValue": "input<string>('Select')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "selectedOptionIndexes",
                    "defaultValue": "signal<number[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOptionIndexesByOutsideValue",
                    "args": [
                        {
                            "name": "outsideValues",
                            "type": "(T | PrimitiveTypes)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.options()"
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "outsideValues",
                            "type": "(T | PrimitiveTypes)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.options()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | ",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | ",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdownOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSelect",
                    "args": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "optionValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "optionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "optionValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "outsideValue",
                            "type": "(T | PrimitiveTypes)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "outsideValue",
                            "type": "(T | PrimitiveTypes)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CdkConnectedOverlay"
                },
                {
                    "name": "CdkOverlayOrigin"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  input,\r\n  InputSignal,\r\n  signal,\r\n  WritableSignal\r\n} from '@angular/core';\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule\r\n} from '@angular/forms';\r\nimport { PrimitiveTypes } from '@angular/cli/src/analytics/analytics-parameters';\r\nimport { DropdownItem } from '../../../interfaces/dropdown.interface';\r\n\r\n@Component({\r\n  selector: 'app-multi-dropdown',\r\n  imports: [\r\n    CdkConnectedOverlay,\r\n    CdkOverlayOrigin,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  templateUrl: './multi-dropdown.component.html',\r\n  styleUrl: './multi-dropdown.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MultiDropdownComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MultiDropdownComponent<T extends DropdownItem>\r\n  implements ControlValueAccessor\r\n{\r\n  options: InputSignal<T[]> = input.required<T[]>();\r\n  optionValueName: InputSignal<string | null> = input<string | null>('id'); // Empty if Need Object As Value\r\n  optionLabelName: InputSignal<string> = input('label');\r\n  loading: InputSignal<boolean> = input(false);\r\n\r\n  empty: InputSignal<string> = input<string>('No Options');\r\n  placeholder: InputSignal<string> = input<string>('Select');\r\n  countVisibleSelectedOptions: InputSignal<number> = input<number>(2);\r\n\r\n  selectedOptionIndexes: WritableSignal<number[]> = signal<number[]>([]);\r\n\r\n  isOpen: WritableSignal<boolean> = signal<boolean>(false);\r\n  isDisabled: WritableSignal<boolean> = signal<boolean>(false);\r\n\r\n  get selectedOptionLabels(): unknown[] {\r\n    return this.selectedOptionIndexes().map(\r\n      (selectedOptionIndex: number): unknown =>\r\n        this.options()[selectedOptionIndex][this.optionLabelName()]\r\n    );\r\n  }\r\n\r\n  toggleSelect(optionIndex: number, optionValue: boolean): void {\r\n    if (optionValue) {\r\n      this.selectedOptionIndexes.update(\r\n        (selectedOptionIndexes: number[]): number[] => {\r\n          return [...selectedOptionIndexes, optionIndex];\r\n        }\r\n      );\r\n    } else {\r\n      this.selectedOptionIndexes.update(\r\n        (selectedOptionIndexes: number[]): number[] => {\r\n          return selectedOptionIndexes.filter(\r\n            (selectedOptionIndex: number): boolean => {\r\n              return selectedOptionIndex !== optionIndex;\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n\r\n    const selectedOptions: unknown[] = this.selectedOptionIndexes().map(\r\n      (selectedOptionIndex: number): unknown => {\r\n        const optionValueName: string | null = this.optionValueName();\r\n        if (optionValueName) {\r\n          return this.options()[selectedOptionIndex][optionValueName];\r\n        }\r\n\r\n        return this.options()[selectedOptionIndex];\r\n      }\r\n    );\r\n\r\n    this.onChange(selectedOptions);\r\n    this.onTouched();\r\n  }\r\n\r\n  // DropDown Open/Close\r\n  toggleDropdownOpen(): void {\r\n    this.isOpen.update((isOpen: boolean): boolean => !isOpen);\r\n  }\r\n\r\n  closeDropdown(): void {\r\n    this.isOpen.set(false);\r\n  }\r\n\r\n  // Value Accessor Functions\r\n  private onChange = (value: T | unknown) => {};\r\n  private onTouched = () => {};\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled.set(isDisabled);\r\n  }\r\n\r\n  registerOnChange(fn: (value: T | unknown) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  writeValue(outsideValue: (T | PrimitiveTypes)[]): void {\r\n    const indexes: number[] = this.getOptionIndexesByOutsideValue(outsideValue);\r\n    this.selectedOptionIndexes.set(indexes);\r\n  }\r\n\r\n  private getOptionIndexesByOutsideValue(\r\n    outsideValues: (T | PrimitiveTypes)[],\r\n    options: T[] = this.options()\r\n  ): number[] {\r\n    if (outsideValues[0] == null) {\r\n      return [];\r\n    }\r\n\r\n    const result: number[] = [];\r\n\r\n    if (typeof outsideValues[0] == 'object') {\r\n      // @ts-ignore-next-line | Value Type is Object\r\n      outsideValues.forEach((outsideValue: T) => {\r\n        const stringifiedOutsideValue: string = JSON.stringify(outsideValue);\r\n        const selectedIndex: number = options.findIndex(\r\n          (option: T): boolean => {\r\n            return JSON.stringify(option) === stringifiedOutsideValue;\r\n          }\r\n        );\r\n\r\n        result.push(selectedIndex);\r\n      });\r\n    } else {\r\n      const optionValueName: string | null = this.optionValueName();\r\n      if (optionValueName == null) {\r\n        return [];\r\n      }\r\n\r\n      // @ts-ignore-next-line | Value Type is PrimitiveTypes\r\n      outsideValues.forEach((outsideValue: PrimitiveTypes) => {\r\n        const selectedIndex: number = options.findIndex(\r\n          (option: T): boolean => option[optionValueName] === outsideValue\r\n        );\r\n\r\n        result.push(selectedIndex);\r\n      });\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n",
            "styleUrl": "./multi-dropdown.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "selectedOptionLabels": {
                    "name": "selectedOptionLabels",
                    "getSignature": {
                        "name": "selectedOptionLabels",
                        "type": "[]",
                        "returnType": "[]",
                        "line": 56
                    }
                }
            },
            "templateData": "@let dropdownButtonWidth = trigger.elementRef.nativeElement.offsetWidth;\r\n\r\n<div class=\"multi-dropdown\">\r\n  <!-- DropDown Button -->\r\n  <button\r\n    cdkOverlayOrigin\r\n    #trigger=\"cdkOverlayOrigin\"\r\n    class=\"multi-dropdown__button\"\r\n    [class.opened]=\"isOpen()\"\r\n    [disabled]=\"isDisabled()\"\r\n    (click)=\"toggleDropdownOpen()\"\r\n  >\r\n    <span\r\n      class=\"multi-dropdown__button_name\"\r\n      [class.placeholder]=\"selectedOptionLabels.length === 0\"\r\n    >\r\n      @if (selectedOptionLabels.length > countVisibleSelectedOptions()) {\r\n        {{ selectedOptionLabels.length }} items selected\r\n      } @else {\r\n        {{ selectedOptionLabels.join(', ') || placeholder() }}\r\n      }\r\n    </span>\r\n\r\n    <i class=\"multi-dropdown__button_icon icon icon-chevron\"></i>\r\n  </button>\r\n\r\n  <!-- DropDown Options -->\r\n  <ng-template\r\n    cdkConnectedOverlay\r\n    [cdkConnectedOverlayOpen]=\"isOpen()\"\r\n    [cdkConnectedOverlayOrigin]=\"trigger\"\r\n    [cdkConnectedOverlayWidth]=\"dropdownButtonWidth\"\r\n    (overlayOutsideClick)=\"closeDropdown()\"\r\n  >\r\n    <ul class=\"multi-dropdown__options\">\r\n      @for (option of options(); track $index) {\r\n        @let isActive = selectedOptionIndexes().includes($index);\r\n\r\n        <li class=\"multi-dropdown__options_item option\">\r\n          <label class=\"option__checkbox\">\r\n            <input\r\n              class=\"option__checkbox_input\"\r\n              type=\"checkbox\"\r\n              [ngModel]=\"isActive\"\r\n              (ngModelChange)=\"toggleSelect($index, $event)\"\r\n            />\r\n\r\n            <!-- UI Checkbox Content -->\r\n            <span class=\"option__checkbox_content\">\r\n              @if (isActive) {\r\n                <i class=\"icon icon-done\"></i>\r\n              }\r\n            </span>\r\n          </label>\r\n\r\n          {{ option[optionLabelName()] }}\r\n        </li>\r\n      }\r\n\r\n      @if (options().length === 0) {\r\n        <li class=\"multi-dropdown__options_item empty\">{{ empty() }}</li>\r\n      }\r\n    </ul>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "MyWalletsBalanceComponent",
            "id": "component-MyWalletsBalanceComponent-6398f8192ae724200e3192d51a953149e3c3b56de2671cf1f4b70e1b78ff37e5e38f31e7f5f4d40ad4f46deba14881d23dc0097622c8e30187e28ec4b5880489",
            "file": "src/app/features/my-wallets/components/my-wallets-balance/my-wallets-balance.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-wallets-balance",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./my-wallets-balance.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "balance",
                    "defaultValue": "5240",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                },
                {
                    "name": "profitPercentage",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "balance",
                    "defaultValue": "5240",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                },
                {
                    "name": "profitPercentage",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-my-wallets-balance',\r\n  templateUrl: './my-wallets-balance.component.html',\r\n  styleUrl: './my-wallets-balance.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MyWalletsBalanceComponent {\r\n  balance: InputSignal<number> = input<number>(5240);\r\n  profitPercentage: InputSignal<number> = input<number>(12);\r\n  isLoading: InputSignal<boolean> = input<boolean>(false);\r\n}\r\n",
            "styleUrl": "./my-wallets-balance.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"content\">\r\n    <div class=\"content__balance balance\">\r\n      <span class=\"balance__label\">Your Balance</span>\r\n      <span\r\n        class=\"balance__value\"\r\n        *skeleton=\"isLoading(); height: '25px'; width: '100%'\"\r\n      >\r\n        {{ balance() || 0 | currency }}\r\n      </span>\r\n    </div>\r\n    <div\r\n      class=\"content__profit\"\r\n      *skeleton=\"isLoading(); width: '75px'; height: '16px'\"\r\n    >\r\n      <span\r\n        class=\"content__profit_arrow icon\"\r\n        [ngClass]=\"{\r\n          'icon-arrow-up': (profitPercentage() || 0) > 0,\r\n          'icon-arrow-down': (profitPercentage() || 0) < 0\r\n        }\"\r\n      ></span>\r\n      <span class=\"content__profit_value\">{{ profitPercentage() || 0 }}%</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "MyWalletsPageComponent",
            "id": "component-MyWalletsPageComponent-e97045530a291932931fb87254869612496692efbafa83bec8dfa9ec7c00fea024c7e10e5ea46a2445b9068987859c1db086abf44c2996f80dcdd2baeea3ad80",
            "file": "src/app/features/my-wallets/pages/my-wallets-page/my-wallets-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-wallets-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./my-wallets-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "testItems",
                    "defaultValue": "[\r\n    { label: 'Test 2', routerLink: '/dashboard/my-wallets/test' },\r\n    { label: 'Test 3', routerLink: '/dashboard/my-wallets/test3' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HorizontalTab[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { HorizontalTab } from '../../../../shared/interfaces/horizontal-tab.interface';\r\nimport { ButtonSeverity } from '../../../../shared/enums/button.enum';\r\n\r\n@Component({\r\n  selector: 'app-my-wallets-page',\r\n  templateUrl: './my-wallets-page.component.html',\r\n  styleUrl: './my-wallets-page.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MyWalletsPageComponent {\r\n  protected readonly ButtonSeverity = ButtonSeverity;\r\n  protected readonly testItems: HorizontalTab[] = [\r\n    { label: 'Test 2', routerLink: '/dashboard/my-wallets/test' },\r\n    { label: 'Test 3', routerLink: '/dashboard/my-wallets/test3' }\r\n  ];\r\n}\r\n",
            "styleUrl": "./my-wallets-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"content\">\r\n    <app-horizontal-tabs [tabs]=\"testItems\" />\r\n    <app-my-wallets-balance />\r\n    <app-button [severity]=\"ButtonSeverity.Success\">+ Add New Card</app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-ef819c181b4c9841b4aa31c429ec4a0c67baff1435f1c84ede3ca5ec57c6741f97c5153df5e8c9c0e08400a96531c4ea97bb596a4efec90f371975dda9814dfd",
            "file": "src/app/shared/components/profile/profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_avatar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "avatar",
                    "defaultValue": "input(this.PLACEHOLDER_AVATAR_PATH, {\r\n    transform: (avatar: string): string => {\r\n      this._avatar = avatar;\r\n      return avatar;\r\n    }\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fullName",
                    "defaultValue": "input<string>('Mahfuzul Nabil')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "PLACEHOLDER_AVATAR_PATH",
                    "defaultValue": "'./assets/icons/profile/avatar-placeholder.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDownloadImageError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrl: './profile.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProfileComponent {\r\n  protected readonly PLACEHOLDER_AVATAR_PATH: string =\r\n    './assets/icons/profile/avatar-placeholder.png';\r\n\r\n  fullName: InputSignal<string> = input<string>('Mahfuzul Nabil');\r\n  avatar: InputSignal<string> = input(this.PLACEHOLDER_AVATAR_PATH, {\r\n    transform: (avatar: string): string => {\r\n      this._avatar = avatar;\r\n      return avatar;\r\n    }\r\n  });\r\n\r\n  _avatar: string = '';\r\n\r\n  onDownloadImageError() {\r\n    this._avatar = this.PLACEHOLDER_AVATAR_PATH;\r\n    console.error(\r\n      `Something went wrong while downloading profile image! ` +\r\n        `New image path: ${this.PLACEHOLDER_AVATAR_PATH}!`\r\n    );\r\n  }\r\n}\r\n",
            "styleUrl": "./profile.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"profile\">\r\n    <div class=\"profile__avatar\">\r\n      <img\r\n        class=\"profile__avatar_img\"\r\n        alt=\"Profile Avatar\"\r\n        [src]=\"_avatar\"\r\n        (error)=\"onDownloadImageError()\"\r\n      />\r\n    </div>\r\n    <span class=\"profile__name\">{{ fullName() }}</span>\r\n  </div>\r\n  <div class=\"dropdown\">\r\n    <span class=\"icon icon-dropdown\"></span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SignInPageComponent",
            "id": "component-SignInPageComponent-1011b44bb5bf1cf799297d7c068d3e286ad0e1202446b8b9984d2e0c6698414ee514eb2712bc5519d1acbb5cc0df8b9505a264169936313a3920464b6ce53ee7",
            "file": "src/app/features/authorization/pages/sign-in-page/sign-in-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sign-in-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonSize",
                    "defaultValue": "ButtonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonType",
                    "defaultValue": "ButtonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "signInForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "initSignInForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n  ButtonSeverity,\r\n  ButtonSize,\r\n  ButtonType\r\n} from '../../../../shared/enums/button.enum';\r\n\r\n@Component({\r\n  selector: 'app-sign-in-page',\r\n  templateUrl: './sign-in-page.component.html',\r\n  styleUrl: './sign-in-page.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SignInPageComponent implements OnInit {\r\n  signInForm!: FormGroup;\r\n\r\n  protected readonly ButtonSize: typeof ButtonSize = ButtonSize;\r\n  protected readonly ButtonSeverity: typeof ButtonSeverity = ButtonSeverity;\r\n  protected readonly ButtonType: typeof ButtonType = ButtonType;\r\n\r\n  constructor(private formBuilder: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initSignInForm();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.log('Submit');\r\n  }\r\n\r\n  private initSignInForm(): void {\r\n    this.signInForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      short_remember: [false]\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./sign-in-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\r\n  <h2 class=\"header__title\">Welcome back</h2>\r\n  <p class=\"header__subtitle\">Welcome back! Please enter your details</p>\r\n</div>\r\n<form [formGroup]=\"signInForm\" (ngSubmit)=\"onSubmit()\" class=\"form\">\r\n  <div class=\"form__content\">\r\n    <app-input\r\n      label=\"Email\"\r\n      placeholder=\"example@gmail.com\"\r\n      formControlName=\"email\"\r\n    />\r\n\r\n    <app-input-password\r\n      label=\"Password\"\r\n      placeholder=\"••••••••\"\r\n      formControlName=\"password\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"form__options\">\r\n    <div class=\"form__options_remember\">\r\n      <app-checkbox\r\n        label=\"Remember for 30 Days\"\r\n        formControlName=\"short_remember\"\r\n      />\r\n    </div>\r\n    <a routerLink=\"/authorization/forgot-password\" class=\"form__options_link\">\r\n      Forgot password\r\n    </a>\r\n  </div>\r\n\r\n  <div class=\"form__actions\">\r\n    <app-button\r\n      [disabled]=\"signInForm.invalid\"\r\n      [severity]=\"ButtonSeverity.Primary\"\r\n      [size]=\"ButtonSize.Wide\"\r\n    >\r\n      Sign in\r\n    </app-button>\r\n    <app-button\r\n      [type]=\"ButtonType.Button\"\r\n      [icon]=\"'icon-google'\"\r\n      [outlined]=\"true\"\r\n      [severity]=\"ButtonSeverity.Secondary\"\r\n      [size]=\"ButtonSize.Wide\"\r\n    >\r\n      Sign In with Google\r\n    </app-button>\r\n  </div>\r\n</form>\r\n<div class=\"footer\">\r\n  <span class=\"footer__question\">Already have an account?</span>\r\n  <a class=\"footer__link\" routerLink=\"/authorization/sign-up\">\r\n    Sign up for free\r\n  </a>\r\n</div>\r\n"
        },
        {
            "name": "SignUpPageComponent",
            "id": "component-SignUpPageComponent-89760f5c9da6bc1c1fa9df33d9ab47bc994f5f60245474636d39a14348fd308d01fc3433aecbc8eeac48021ef09b8eaabfe5dab61b50153e7aafc62d4ee95286",
            "file": "src/app/features/authorization/pages/sign-up-page/sign-up-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sign-up-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonSize",
                    "defaultValue": "ButtonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "signUpForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "initSignUpForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n  ButtonSeverity,\r\n  ButtonSize\r\n} from '../../../../shared/enums/button.enum';\r\n\r\n@Component({\r\n  selector: 'app-sign-up-page',\r\n  templateUrl: './sign-up-page.component.html',\r\n  styleUrl: './sign-up-page.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SignUpPageComponent implements OnInit {\r\n  signUpForm!: FormGroup;\r\n\r\n  protected readonly ButtonSeverity: typeof ButtonSeverity = ButtonSeverity;\r\n  protected readonly ButtonSize: typeof ButtonSize = ButtonSize;\r\n\r\n  constructor(private formBuilder: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initSignUpForm();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    console.log('Submit');\r\n  }\r\n\r\n  private initSignUpForm(): void {\r\n    this.signUpForm = this.formBuilder.group({\r\n      fullName: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./sign-up-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\r\n  <h2 class=\"header__title\">Create new account</h2>\r\n  <p class=\"header__subtitle\">Welcome back! Please enter your details</p>\r\n</div>\r\n<form [formGroup]=\"signUpForm\" class=\"form\">\r\n  <div class=\"form__content\">\r\n    <app-input\r\n      label=\"Full Name\"\r\n      placeholder=\"Enter Full Name\"\r\n      formControlName=\"fullName\"\r\n    />\r\n\r\n    <app-input\r\n      label=\"Email\"\r\n      placeholder=\"example@gmail.com\"\r\n      formControlName=\"email\"\r\n    />\r\n\r\n    <app-input-password\r\n      label=\"Password\"\r\n      placeholder=\"••••••••\"\r\n      formControlName=\"password\"\r\n    />\r\n  </div>\r\n  <div class=\"form__actions\">\r\n    <app-button [severity]=\"ButtonSeverity.Primary\" [size]=\"ButtonSize.Wide\">\r\n      Create Account\r\n    </app-button>\r\n    <app-button\r\n      [icon]=\"'icon-google'\"\r\n      [outlined]=\"true\"\r\n      [severity]=\"ButtonSeverity.Secondary\"\r\n      [size]=\"ButtonSize.Wide\"\r\n    >\r\n      Sign up with Google\r\n    </app-button>\r\n  </div>\r\n</form>\r\n<div class=\"footer\">\r\n  <span class=\"footer__question\">Already have an account?</span>\r\n  <a class=\"footer__link\" routerLink=\"/authorization/sign-in\"> Sign In </a>\r\n</div>\r\n"
        },
        {
            "name": "SkeletonLoaderComponent",
            "id": "component-SkeletonLoaderComponent-76532ad57c77bdae60f81d9df0380bc27036ad509f604049d3d9f03e9242080344b6b1e8df347ed69a3e71b73b41b7c60c015ea7f8ecdf222af8d674d8f795af",
            "file": "src/app/shared/components/skeleton-loader/skeleton-loader.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-skeleton-loader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./skeleton-loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "borderRadius",
                    "defaultValue": "input('7px')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "height",
                    "defaultValue": "input('20px')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "width",
                    "defaultValue": "input('100px')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { NgStyle } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-skeleton-loader',\r\n  imports: [NgStyle],\r\n  templateUrl: './skeleton-loader.component.html',\r\n  styleUrl: './skeleton-loader.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SkeletonLoaderComponent {\r\n  width: InputSignal<string> = input('100px');\r\n  height: InputSignal<string> = input('20px');\r\n  borderRadius: InputSignal<string> = input('7px');\r\n}\r\n",
            "styleUrl": "./skeleton-loader.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div\r\n  class=\"skeleton\"\r\n  [ngStyle]=\"{\r\n    width: width(),\r\n    height: height(),\r\n    borderRadius: borderRadius()\r\n  }\"\r\n></div>\r\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-eb6e6df6ce32ae6ff0d7ad968e592b49dae2f40cb84756cadec9555c0749c4121c53b0ff2d2ea9b1b0b8e8c004e1423e013baa7ef167900a91fad8e960642121",
            "file": "src/app/shared/components/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input<SpinnerSize>(SpinnerSize.Default)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<SpinnerSize>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { SpinnerSize } from '../../enums/spiner.enum';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  imports: [],\r\n  templateUrl: './spinner.component.html',\r\n  styleUrl: './spinner.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpinnerComponent {\r\n  size: InputSignal<SpinnerSize> = input<SpinnerSize>(SpinnerSize.Default);\r\n}\r\n",
            "styleUrl": "./spinner.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"lds-ring\" [class]=\"size()\">\r\n  <div></div>\r\n  <div></div>\r\n  <div></div>\r\n  <div></div>\r\n</div>\r\n"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-29ebab7d7e4507f11d56829f54a3bfc3dc26bbbd0b7b1201cac0be4fd9c1c8331e7c27bbf7c375d29eaaff41ca1be66436dce73927b152c516baa4c0c91d921f",
            "file": "src/app/shared/components/tag/tag.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tag.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "severity",
                    "defaultValue": "input<TagSeverity>(TagSeverity.Success)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<TagSeverity>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { TagSeverity } from '../../enums/tag.enum';\r\n\r\n@Component({\r\n  selector: 'app-tag',\r\n  imports: [NgClass],\r\n  templateUrl: './tag.component.html',\r\n  styleUrl: './tag.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TagComponent {\r\n  severity: InputSignal<TagSeverity> = input<TagSeverity>(TagSeverity.Success);\r\n}\r\n",
            "styleUrl": "./tag.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span data-testingId=\"tag\" class=\"tag\" [ngClass]=\"[severity()]\">\r\n  <ng-content />\r\n</span>\r\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-af795806d25792d4215e6a48e5aa5c24422a2b860c1e39801aa1d4ffc2842fc30da459555804b49e58f244cae3c4eeb5e2c54b9a5b9e6a1bed83f1d0942b6c7d",
            "file": "src/app/shared/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "left",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "required": false
                },
                {
                    "name": "top",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "required": false
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "left",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "required": false
                },
                {
                    "name": "style",
                    "defaultValue": "input<TooltipStyle>(TooltipStyle.Default)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<TooltipStyle>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tooltip",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "top",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "required": false
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input, InputSignal } from '@angular/core';\r\nimport { TooltipStyle } from '../../enums/tooltip.enum';\r\n\r\n@Component({\r\n  selector: 'app-tooltip',\r\n  templateUrl: './tooltip.component.html',\r\n  styleUrls: ['./tooltip.component.scss']\r\n})\r\nexport class TooltipComponent {\r\n  style: InputSignal<TooltipStyle> = input<TooltipStyle>(TooltipStyle.Default);\r\n  tooltip: InputSignal<string> = input('');\r\n  left: InputSignal<number> = input(0);\r\n  top: InputSignal<number> = input(0);\r\n  visible: InputSignal<boolean> = input(false);\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tooltip {\r\n  position: fixed;\r\n\r\n  font-family: 'Kumbh Sans', sans-serif;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  color: var(--tooltip-color);\r\n\r\n  opacity: 0;\r\n\r\n  padding: 3px 6px;\r\n  transition: opacity 300ms;\r\n\r\n  border-radius: 4px;\r\n  background-color: var(--tooltip-bg);\r\n\r\n  &--visible {\r\n    opacity: 1;\r\n  }\r\n\r\n  &[data-style='success'] {\r\n    color: var(--tooltip-success-color);\r\n    background-color: var(--tooltip-success-bg);\r\n  }\r\n\r\n  &[data-position='above'] {\r\n    transform: translate(-50%, -100%);\r\n    margin-bottom: 7px;\r\n\r\n    &::before {\r\n      border-left-color: transparent;\r\n      border-right-color: transparent;\r\n      border-bottom: none;\r\n      left: calc(50% - 5px);\r\n      bottom: -5px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\r\n  class=\"tooltip\"\r\n  [attr.data-position]=\"'above'\"\r\n  [attr.data-style]=\"style()\"\r\n  [class.tooltip--visible]=\"visible()\"\r\n  [style.left.px]=\"left()\"\r\n  [style.top.px]=\"top()\"\r\n>\r\n  {{ tooltip() }}\r\n</div>\r\n"
        },
        {
            "name": "TransactionDateComponent",
            "id": "component-TransactionDateComponent-defcc01985cc10bdbeaf0361f9c146cf8d41920b3dad2b1c61fac4d2d105fc0eb2704a791ca19af9f9377b09abf970f15be673c2dccab42ca84d699d7c5c9f9d",
            "file": "src/app/shared/components/transaction/transaction-date/transaction-date.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-transaction-date",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./transaction-date.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "defaultValue": "input<Date | string>(new Date())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Date | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-transaction-date',\r\n  imports: [DatePipe],\r\n  templateUrl: './transaction-date.component.html',\r\n  styleUrl: './transaction-date.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TransactionDateComponent {\r\n  date: InputSignal<Date | string> = input<Date | string>(new Date());\r\n}\r\n",
            "styleUrl": "./transaction-date.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"date\">\r\n  <div class=\"date__day\">{{ date() | date: 'dd MMM yyyy' }}</div>\r\n  <div class=\"date__time\">at {{ date() | date: 'hh:mm a' }}</div>\r\n</div>\r\n"
        },
        {
            "name": "TransactionProductComponent",
            "id": "component-TransactionProductComponent-14704fd8ff22aae873281ad0494846d29d20b3c0038ef484f244e6cc7856a404f18d154738095631e3a5f4430f1b9d25c41b15df70321569a3dd29c369a030ce",
            "file": "src/app/shared/components/transaction/transaction-product/transaction-product.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-transaction-product",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./transaction-product.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_imageSrc",
                    "defaultValue": "this.DEFAULT_PRODUCT_IMAGE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "category",
                    "defaultValue": "input('Apple. Inc')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "DEFAULT_PRODUCT_IMAGE",
                    "defaultValue": "'https://www.svgrepo.com/show/422038/product.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "imageSrc",
                    "defaultValue": "input(this.DEFAULT_PRODUCT_IMAGE, {\r\n    transform: (imageSrc: string): string => {\r\n      this._imageSrc = imageSrc;\r\n      return imageSrc;\r\n    }\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "defaultValue": "input('Iphone 13 Pro MAX')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "onDownloadImageError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-transaction-product',\r\n  imports: [],\r\n  templateUrl: './transaction-product.component.html',\r\n  styleUrl: './transaction-product.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TransactionProductComponent {\r\n  protected readonly DEFAULT_PRODUCT_IMAGE: string =\r\n    'https://www.svgrepo.com/show/422038/product.svg';\r\n\r\n  name: InputSignal<string> = input('Iphone 13 Pro MAX');\r\n  category: InputSignal<string> = input('Apple. Inc');\r\n  imageSrc: InputSignal<string> = input(this.DEFAULT_PRODUCT_IMAGE, {\r\n    transform: (imageSrc: string): string => {\r\n      this._imageSrc = imageSrc;\r\n      return imageSrc;\r\n    }\r\n  });\r\n\r\n  _imageSrc: string = this.DEFAULT_PRODUCT_IMAGE;\r\n\r\n  onDownloadImageError() {\r\n    this._imageSrc = this.DEFAULT_PRODUCT_IMAGE;\r\n  }\r\n}\r\n",
            "styleUrl": "./transaction-product.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"product\">\r\n  <div class=\"product__image\">\r\n    @if (_imageSrc) {\r\n      <img\r\n        [src]=\"_imageSrc\"\r\n        alt=\"product\"\r\n        class=\"product__image_logo\"\r\n        (error)=\"onDownloadImageError()\"\r\n      />\r\n    }\r\n  </div>\r\n\r\n  <div class=\"product__content\">\r\n    <h3 class=\"product__content_name\">{{ name() }}</h3>\r\n    <span class=\"product__content_category\">{{ category() }}</span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TransactionsPageComponent",
            "id": "component-TransactionsPageComponent-5d3338340c10e81565a267d830cb973eb61997c82ee37990374ed319a35ff86f41366c8ad82bc4cfbb71ce9480ea2e6a86673e9b18635fb247e26b211af1cac8",
            "file": "src/app/features/transactions/pages/transactions-page/transactions-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-transactions-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./transactions-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "transactions",
                    "defaultValue": "[\r\n    {\r\n      id: 1,\r\n      date: '12-12-2024',\r\n      status: TransactionStatus.Paid,\r\n      countProducts: 2,\r\n      product: {\r\n        id: 2,\r\n        name: 'Test',\r\n        image: 'test',\r\n        category: 'test',\r\n        price: 0,\r\n        currency: Currency.EUR\r\n      }\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Transaction[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Currency } from '../../../../shared/enums/api/currency/currency.enum';\r\nimport { TransactionStatus } from '../../../../shared/enums/api/transaction/transaction.enum';\r\nimport { Transaction } from '../../../../shared/interfaces/api/transaction/transaction.interface';\r\n\r\n@Component({\r\n  selector: 'app-transactions-page',\r\n  templateUrl: './transactions-page.component.html',\r\n  styleUrl: './transactions-page.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TransactionsPageComponent {\r\n  protected readonly transactions: Transaction[] = [\r\n    {\r\n      id: 1,\r\n      date: '12-12-2024',\r\n      status: TransactionStatus.Paid,\r\n      countProducts: 2,\r\n      product: {\r\n        id: 2,\r\n        name: 'Test',\r\n        image: 'test',\r\n        category: 'test',\r\n        price: 0,\r\n        currency: Currency.EUR\r\n      }\r\n    }\r\n  ];\r\n}\r\n",
            "styleUrl": "./transactions-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n    <div class=\"header__search\">\r\n      <app-input placeholder=\"Search Transactions\" icon=\"icon icon-search\" />\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <div class=\"content__table\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name/Business</th>\r\n            <th>Type</th>\r\n            <th>Amount</th>\r\n            <th>Date</th>\r\n            <th>Invoice Id</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          @for (transaction of transactions; track transaction.id) {\r\n            <tr>\r\n              <td>\r\n                <app-transaction-product\r\n                  [name]=\"transaction.product.name\"\r\n                  [category]=\"transaction.product.category\"\r\n                  [imageSrc]=\"transaction.product.image\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <span class=\"content__table_type table-grey\"> Mobile </span>\r\n              </td>\r\n              <td>\r\n                {{\r\n                  transaction.countProducts * transaction.product.price\r\n                    | currency\r\n                }}\r\n              </td>\r\n              <td>\r\n                <app-transaction-date />\r\n              </td>\r\n              <td>\r\n                <span class=\"content__table_invoice table-grey\">\r\n                  ICD28934\r\n                </span>\r\n              </td>\r\n              <td>ACTION</td>\r\n            </tr>\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UiToolkitPageComponent",
            "id": "component-UiToolkitPageComponent-0a81ae9652af6a6d7e93adb2647a4daf98b85a8b23ad24553b6f7e84c5edad9038671437eb93212ebec603838cbbaccebcee53f4f0cc6c1d30653874bde4115e",
            "file": "src/app/features/ui-toolkit/pages/ui-toolkit-page/ui-toolkit-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ui-toolkit-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ui-toolkit-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonSeverity",
                    "defaultValue": "ButtonSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "ButtonSize",
                    "defaultValue": "ButtonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "control2",
                    "defaultValue": "new FormControl(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "control3",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "control4",
                    "defaultValue": "new FormControl([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dateControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "InputIconPosition",
                    "defaultValue": "InputIconPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "TagSeverity",
                    "defaultValue": "TagSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n  ButtonSeverity,\r\n  ButtonSize\r\n} from '../../../../shared/enums/button.enum';\r\nimport { InputIconPosition } from '../../../../shared/enums/input.enum';\r\nimport { TagSeverity } from '../../../../shared/enums/tag.enum';\r\n\r\n@Component({\r\n  selector: 'app-ui-toolkit-page',\r\n  templateUrl: './ui-toolkit-page.component.html',\r\n  styleUrl: './ui-toolkit-page.component.scss',\r\n  standalone: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class UiToolkitPageComponent {\r\n  control4 = new FormControl([]);\r\n  control3 = new FormControl();\r\n  control2 = new FormControl(1);\r\n  control = new FormControl();\r\n  dateControl = new FormControl();\r\n\r\n  protected readonly ButtonSize: typeof ButtonSize = ButtonSize;\r\n  protected readonly ButtonSeverity: typeof ButtonSeverity = ButtonSeverity;\r\n  protected readonly InputIconPosition: typeof InputIconPosition =\r\n    InputIconPosition;\r\n  protected readonly TagSeverity: typeof TagSeverity = TagSeverity;\r\n}\r\n",
            "styleUrl": "./ui-toolkit-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <app-multi-dropdown\r\n    queryControl=\"multiselect\"\r\n    optionValueName=\"id\"\r\n    optionLabelName=\"name\"\r\n    [options]=\"[\r\n      { name: 'asd', id: 'test' },\r\n      { name: 'asd2', id: 'test3' },\r\n      { name: 'asd3', id: 'test5' },\r\n      { name: 'asd4', id: 'test6' }\r\n    ]\"\r\n    [formControl]=\"control4\"\r\n  />\r\n\r\n  <app-date-picker [placeholder]=\"'test'\" [formControl]=\"dateControl\" />\r\n\r\n  <h2>Buttons</h2>\r\n  <app-button [tooltip]=\"'Tooltip'\">Button</app-button>\r\n  <app-button [loading]=\"true\">Button Loading</app-button>\r\n  <app-button [size]=\"ButtonSize.Small\">Button Small</app-button>\r\n  <app-button [size]=\"ButtonSize.Medium\">Button Medium</app-button>\r\n  <app-button [size]=\"ButtonSize.Large\">Button Large</app-button>\r\n  <app-button [size]=\"ButtonSize.Wide\">Button Wide</app-button>\r\n\r\n  <app-button [severity]=\"ButtonSeverity.Primary\">Button Primary</app-button>\r\n  <app-button [severity]=\"ButtonSeverity.Secondary\">\r\n    Button Secondary\r\n  </app-button>\r\n\r\n  <app-button [severity]=\"ButtonSeverity.Success\">Button Success</app-button>\r\n\r\n  <app-button\r\n    [icon]=\"'icon-search'\"\r\n    [outlined]=\"true\"\r\n    [severity]=\"ButtonSeverity.Secondary\"\r\n  >\r\n    Button Secondary outlined\r\n  </app-button>\r\n\r\n  <br />\r\n\r\n  <h2>Tags</h2>\r\n\r\n  <app-tag [severity]=\"TagSeverity.Warning\">Pending</app-tag>\r\n  <app-tag [severity]=\"TagSeverity.Success\">Paid</app-tag>\r\n  <app-tag [severity]=\"TagSeverity.Error\">Unpaid</app-tag>\r\n\r\n  <br />\r\n\r\n  <h2>Spinner</h2>\r\n  <app-spinner />\r\n\r\n  <br />\r\n\r\n  <h2>CheckBox</h2>\r\n  <app-checkbox\r\n    queryControl=\"checkbox\"\r\n    [trueValue]=\"'testTrue'\"\r\n    [falseValue]=\"'testFalse'\"\r\n    [label]=\"'Test'\"\r\n    [formControl]=\"control3\"\r\n  />\r\n\r\n  <h2>Dropdown</h2>\r\n  <app-dropdown [loading]=\"true\" [formControl]=\"control\" [options]=\"[]\" />\r\n\r\n  <app-dropdown\r\n    queryControl=\"test\"\r\n    [optionValueName]=\"null\"\r\n    [optionLabelName]=\"'name'\"\r\n    [formControl]=\"control\"\r\n    [options]=\"[\r\n      { name: 'asd', id: 'test' },\r\n      { name: 'asd2', id: 'test3' }\r\n    ]\"\r\n  />\r\n\r\n  <br />\r\n\r\n  <h2>Inputs</h2>\r\n  <app-input queryControl=\"query\" label=\"Query Test\" [formControl]=\"control2\" />\r\n\r\n  <app-input [formControl]=\"control\" />\r\n\r\n  <app-input [formControl]=\"control\" label=\"Test\" />\r\n  <app-input\r\n    [formControl]=\"control\"\r\n    label=\"Test 2\"\r\n    placeholder=\"Test placeholder\"\r\n  />\r\n\r\n  <!--    [disabled]=\"true\"-->\r\n  <app-input\r\n    [formControl]=\"control\"\r\n    [icon]=\"'icon-search'\"\r\n    label=\"Test 3\"\r\n    placeholder=\"Test placeholder\"\r\n  />\r\n\r\n  <!--    [disabled]=\"true\"-->\r\n  <app-input\r\n    [formControl]=\"control\"\r\n    [iconPosition]=\"InputIconPosition.Right\"\r\n    [icon]=\"'icon-search'\"\r\n    label=\"Test 4\"\r\n    placeholder=\"Test placeholder\"\r\n  />\r\n</div>\r\n"
        },
        {
            "name": "VerticalTabsComponent",
            "id": "component-VerticalTabsComponent-f753742c1156c53e0d8fb0adef48cdc2655abd6f149aff354934be70ccaf7e1b42e92a77aebfb6764d9e35a60e44f1fefcfbbd6d2e011494f2244a58813bbd55",
            "file": "src/app/shared/components/tabs/vertical-tabs/vertical-tabs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vertical-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./vertical-tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "defaultValue": "input.required<VerticalTab[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<VerticalTab[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  InputSignal\r\n} from '@angular/core';\r\nimport { RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { VerticalTab } from '../../../interfaces/vertical-tab.interface';\r\n\r\n@Component({\r\n  selector: 'app-vertical-tabs',\r\n  imports: [RouterLink, RouterLinkActive],\r\n  templateUrl: './vertical-tabs.component.html',\r\n  styleUrl: './vertical-tabs.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VerticalTabsComponent {\r\n  tabs: InputSignal<VerticalTab[]> = input.required<VerticalTab[]>();\r\n}\r\n",
            "styleUrl": "./vertical-tabs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ul class=\"tabs\">\r\n  @for (tab of tabs(); track tab.routerLink) {\r\n    <li class=\"tabs__item tab\">\r\n      <a\r\n        class=\"tab__link\"\r\n        routerLinkActive=\"active\"\r\n        [routerLink]=\"tab.routerLink\"\r\n      >\r\n        @if (tab.icon) {\r\n          <span class=\"tab__link_icon icon\" [class]=\"tab.icon\"></span>\r\n        }\r\n\r\n        <span class=\"tab__link_text\">{{ tab.label }}</span>\r\n      </a>\r\n    </li>\r\n  }\r\n</ul>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AuthorizationModule",
            "id": "module-AuthorizationModule-b1b85f495383dffd43e2413f5b308b4f6a0398a523e1628dac9d6f18a22f07dc76aa772e69497d32cc1b340e2735ffffe4f26a6036e1d3d1a478c793568560cb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/authorization/authorization.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n// Routing\r\nimport { AuthorizationRoutingModule } from './authorization-routing.module';\r\n\r\n// Pages\r\nimport { SignInPageComponent } from './pages/sign-in-page/sign-in-page.component';\r\nimport { SignUpPageComponent } from './pages/sign-up-page/sign-up-page.component';\r\n\r\n// Layout\r\nimport { AuthorizationContainerComponent } from '../../shared/layout/authorization-container/authorization-container.component';\r\n\r\n// Shared\r\nimport { InputComponent } from '../../shared/components/controllers/input/input.component';\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\nimport { CheckboxComponent } from '../../shared/components/controllers/checkbox/checkbox.component';\r\nimport { InputPasswordComponent } from '../../shared/components/controllers/input-password/input-password.component';\r\n\r\nconst components = [\r\n  InputComponent,\r\n  InputPasswordComponent,\r\n  ButtonComponent,\r\n  CheckboxComponent,\r\n  AuthorizationContainerComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: [SignInPageComponent, SignUpPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AuthorizationRoutingModule,\r\n    ReactiveFormsModule,\r\n    ...components\r\n  ]\r\n})\r\nexport class AuthorizationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SignInPageComponent"
                        },
                        {
                            "name": "SignUpPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthorizationContainerComponent"
                        },
                        {
                            "name": "AuthorizationRoutingModule"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "InputPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthorizationRoutingModule",
            "id": "module-AuthorizationRoutingModule-d110408b8ab44efbb013676ceedfd642370248e112d052f41efe812a26b4b42953a439808fdadd7f5909bb9cc65511ef32456585f73b296bb61cda7ab67c0667",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/authorization/authorization-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SignInPageComponent } from './pages/sign-in-page/sign-in-page.component';\r\nimport { SignUpPageComponent } from './pages/sign-up-page/sign-up-page.component';\r\nimport { AuthorizationContainerComponent } from '../../shared/layout/authorization-container/authorization-container.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthorizationContainerComponent,\r\n    children: [\r\n      {\r\n        path: 'sign-in',\r\n        component: SignInPageComponent\r\n      },\r\n      {\r\n        path: 'sign-up',\r\n        component: SignUpPageComponent\r\n      },\r\n      {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'sign-in'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthorizationRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-cd7439500f6522d4e2ad77c2104567a2090ec59119804d0fe2be23913cf221bd4cbec63395b6ebd5a9d3d56fd2a504a431e6c11208c27fd2b732a625cf0eb775",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\nimport { DashboardPageComponent } from './pages/dashboard-page/dashboard-page.component';\r\nimport { DashboardStatisticCardComponent } from './components/dashboard-statistic-card/dashboard-statistic-card.component';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { DashboardWorkingCapitalComponent } from './components/dashboard-working-capital/dashboard-working-capital.component';\r\nimport { DashboardWorkingCapitalChartComponent } from './components/dashboard-working-capital/dashboard-working-capital-chart/dashboard-working-capital-chart.component';\r\nimport { DashboardRecentTransactionsComponent } from './components/dashboard-recent-transactions/dashboard-recent-transactions.component';\r\nimport { DashboardWalletsComponent } from './components/dashboard-wallets/dashboard-wallets.component';\r\nimport { DashboardScheduledTransfersComponent } from './components/dashboard-scheduled-transfers/dashboard-scheduled-transfers.component';\r\nimport { DropdownComponent } from '../../shared/components/controllers/dropdown/dropdown.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { QueryControlDirective } from '../../shared/directives/query-control.directive';\r\nimport { CurrencyPipe, NgClass, NgStyle } from '@angular/common';\r\nimport { CreditCardComponent } from '../../shared/components/credit-card/credit-card.component';\r\nimport { SkeletonDirective } from '../../shared/directives/skeleton-loading.directive';\r\nimport { TransactionProductComponent } from '../../shared/components/transaction/transaction-product/transaction-product.component';\r\nimport { LinkComponent } from '../../shared/components/link/link.component';\r\nimport { CardNumbersPipe } from '../../shared/pipes/card-numbers.pipe';\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DashboardPageComponent,\r\n    DashboardStatisticCardComponent,\r\n    DashboardWorkingCapitalComponent,\r\n    DashboardWorkingCapitalChartComponent,\r\n    DashboardRecentTransactionsComponent,\r\n    DashboardWalletsComponent,\r\n    DashboardScheduledTransfersComponent\r\n  ],\r\n  imports: [\r\n    DashboardRoutingModule,\r\n    DropdownComponent,\r\n    ReactiveFormsModule,\r\n    QueryControlDirective,\r\n    NgStyle,\r\n    NgClass,\r\n    CurrencyPipe,\r\n    CreditCardComponent,\r\n    SkeletonDirective,\r\n    TransactionProductComponent,\r\n    LinkComponent,\r\n    CardNumbersPipe,\r\n    ButtonComponent\r\n  ]\r\n})\r\nexport class DashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardPageComponent"
                        },
                        {
                            "name": "DashboardRecentTransactionsComponent"
                        },
                        {
                            "name": "DashboardScheduledTransfersComponent"
                        },
                        {
                            "name": "DashboardStatisticCardComponent"
                        },
                        {
                            "name": "DashboardWalletsComponent"
                        },
                        {
                            "name": "DashboardWorkingCapitalChartComponent"
                        },
                        {
                            "name": "DashboardWorkingCapitalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardNumbersPipe"
                        },
                        {
                            "name": "CreditCardComponent"
                        },
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "LinkComponent"
                        },
                        {
                            "name": "NgClass"
                        },
                        {
                            "name": "NgStyle"
                        },
                        {
                            "name": "QueryControlDirective"
                        },
                        {
                            "name": "SkeletonDirective"
                        },
                        {
                            "name": "TransactionProductComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-50270cc273a4fd213f88899f94c2478921b6a3f9be864bf12f96b8e541f6aba3b0d52b55bd78392d1e0aba286d81fb785e4cd9452af82880446bc1464e62853e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardPageComponent } from './pages/dashboard-page/dashboard-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    title: 'Dashboard',\r\n    component: DashboardPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HelpModule",
            "id": "module-HelpModule-f8159979cfebf18961183f15feff014ba7d12e374cb1e3ca567835f5d81d742d2eff8366c87fd2417615a88d28ed785f7f3728919e77f3399b6b6cc75a7bbdf1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/help/help.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HelpRoutingModule } from './help-routing.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    HelpRoutingModule\r\n  ]\r\n})\r\nexport class HelpModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HelpRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HelpRoutingModule",
            "id": "module-HelpRoutingModule-f7b4a521fe1d3326889ce113aac193d6738a35f36ffb15effa22a61cbe47f7af23051cbbc8417431ef36f4fa0a4f2b4a7004cb31758064f03468297daf49927c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/help/help-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class HelpRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InvoicesModule",
            "id": "module-InvoicesModule-3fbbae5038ee616152678be8c09bbca7be3b48a0acefed24be5f5f7b55db7c65ada93ab2612a222abe90f25c6282d1898498cc13c39fc8c84fde8fde6f8c1774",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/invoices/invoices.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { InvoicesRoutingModule } from './invoices-routing.module';\r\nimport { InvoicesCreatePageComponent } from './pages/invoices-create-page/invoices-create-page.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { InputComponent } from '../../shared/components/controllers/input/input.component';\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\nimport { LinkComponent } from '../../shared/components/link/link.component';\r\nimport { InvoicesPageComponent } from './pages/invoices-page/invoices-page.component';\r\nimport { InvoicesClientCardComponent } from './components/invoices-client-card/invoices-client-card.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InvoicesPageComponent,\r\n    InvoicesCreatePageComponent,\r\n    InvoicesClientCardComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    InvoicesRoutingModule,\r\n    ReactiveFormsModule,\r\n    InputComponent,\r\n    ButtonComponent,\r\n    LinkComponent\r\n  ]\r\n})\r\nexport class InvoicesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InvoicesClientCardComponent"
                        },
                        {
                            "name": "InvoicesCreatePageComponent"
                        },
                        {
                            "name": "InvoicesPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "InvoicesRoutingModule"
                        },
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InvoicesRoutingModule",
            "id": "module-InvoicesRoutingModule-9e16d0042beff4626ca00d71eb0fc4a771d1615cd6aa4d0ba204f1aab75c540e982e0eb9dcda6ba083c369cbfd8c85a10c17b9f19894723cea0bc7b144761f3f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/invoices/invoices-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { InvoicesPageComponent } from './pages/invoices-page/invoices-page.component';\r\nimport { InvoicesCreatePageComponent } from './pages/invoices-create-page/invoices-create-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: InvoicesPageComponent\r\n  },\r\n  {\r\n    path: 'create',\r\n    data: { title: 'Create Invoice' },\r\n    component: InvoicesCreatePageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class InvoicesRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MyWalletsModule",
            "id": "module-MyWalletsModule-87dd454afaceec23b12d2f74ace2e7642b89d182df7aec65825c4142bd3808cdc627b189e0fa975d2ff2e7914beda5741f400ba88d056d48d04c75faf55fd8af",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/my-wallets/my-wallets.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MyWalletsRoutingModule } from './my-wallets-routing.module';\r\nimport { MyWalletsPageComponent } from './pages/my-wallets-page/my-wallets-page.component';\r\nimport { HorizontalTabsComponent } from '../../shared/components/tabs/horizontal-tabs/horizontal-tabs.component';\r\nimport { MyWalletsBalanceComponent } from './components/my-wallets-balance/my-wallets-balance.component';\r\nimport { SkeletonDirective } from '../../shared/directives/skeleton-loading.directive';\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\n\r\n@NgModule({\r\n  declarations: [MyWalletsPageComponent, MyWalletsBalanceComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MyWalletsRoutingModule,\r\n    HorizontalTabsComponent,\r\n    SkeletonDirective,\r\n    ButtonComponent\r\n  ]\r\n})\r\nexport class MyWalletsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MyWalletsBalanceComponent"
                        },
                        {
                            "name": "MyWalletsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "HorizontalTabsComponent"
                        },
                        {
                            "name": "MyWalletsRoutingModule"
                        },
                        {
                            "name": "SkeletonDirective"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MyWalletsRoutingModule",
            "id": "module-MyWalletsRoutingModule-7a29962b671308f9d4a3fd3c01b1f18d8efc3801c42f19c990cb4c12e8ed9c4180d5b2c22509f9603887aeebb11b93f8a8febc6a039dcfe8e010ae2e6f2b1f07",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/my-wallets/my-wallets-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MyWalletsPageComponent } from './pages/my-wallets-page/my-wallets-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MyWalletsPageComponent\r\n  },\r\n  {\r\n    path: 'test',\r\n    component: MyWalletsPageComponent\r\n  },\r\n  {\r\n    path: 'test3',\r\n    component: MyWalletsPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MyWalletsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsModule",
            "id": "module-SettingsModule-4cbf75b3a743c2ec5269f4d74e930617f3b96ef569f942b74824c499e8bf24607d597504d38cae7fc6f3195a7a556a418abc20003a1bf2bd5290eee922304044",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/settings/settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SettingsRoutingModule } from './settings-routing.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    SettingsRoutingModule\r\n  ]\r\n})\r\nexport class SettingsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SettingsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsRoutingModule",
            "id": "module-SettingsRoutingModule-e581280464cd9f085823b1304d403b2088aa46ee7ad4112f3bdff1e189f424a4c8d287a87dee7e07f41b56cce41544a36c7eb808ff3374cdb21d1c1bbf934da0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/settings/settings-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SettingsRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TransactionsModule",
            "id": "module-TransactionsModule-aa7d2a494ffdae771047c3c50c3a083a82d2bf849d612f85c7450ce4ab16465c20c608bf2d94d7c554e2b8d968a5a79e09426a1e1a39d886700183f2ad72ceb8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/transactions/transactions.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TransactionsRoutingModule } from './transactions-routing.module';\r\nimport { TransactionsPageComponent } from './pages/transactions-page/transactions-page.component';\r\nimport { TransactionProductComponent } from '../../shared/components/transaction/transaction-product/transaction-product.component';\r\nimport { TransactionDateComponent } from '../../shared/components/transaction/transaction-date/transaction-date.component';\r\nimport { InputComponent } from '../../shared/components/controllers/input/input.component';\r\nimport { TableLoadingDirective } from '../../shared/directives/table-loading.directive';\r\n\r\n@NgModule({\r\n  declarations: [TransactionsPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TransactionsRoutingModule,\r\n    TransactionProductComponent,\r\n    TransactionDateComponent,\r\n    InputComponent,\r\n    TableLoadingDirective\r\n  ]\r\n})\r\nexport class TransactionsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TransactionsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "TableLoadingDirective"
                        },
                        {
                            "name": "TransactionDateComponent"
                        },
                        {
                            "name": "TransactionProductComponent"
                        },
                        {
                            "name": "TransactionsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TransactionsRoutingModule",
            "id": "module-TransactionsRoutingModule-76116ff1552e243c311e3979239d976ccae63ec79cc5c33af3c998cae6737ce4c54d2cc0e30ce3a724b636b0fa25309f0c4dbc6d2e39e162ca3b68f9ee6b107d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/transactions/transactions-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TransactionsPageComponent } from './pages/transactions-page/transactions-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TransactionsPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TransactionsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiToolkitModule",
            "id": "module-UiToolkitModule-af7ce333b6afd58b6377849d725047e7105259ef37d754a3f80ffcc4deca9bd832b8f98c18b5e7358361be232579c45ae466798570e3c7b573d8e86374c4acb4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/ui-toolkit/ui-toolkit.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UiToolkitRoutingModule } from './ui-toolkit-routing.module';\r\nimport { UiToolkitPageComponent } from './pages/ui-toolkit-page/ui-toolkit-page.component';\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\nimport { SpinnerComponent } from '../../shared/components/spinner/spinner.component';\r\nimport { InputComponent } from '../../shared/components/controllers/input/input.component';\r\nimport { DropdownComponent } from '../../shared/components/controllers/dropdown/dropdown.component';\r\nimport { TagComponent } from '../../shared/components/tag/tag.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CheckboxComponent } from '../../shared/components/controllers/checkbox/checkbox.component';\r\nimport { MultiDropdownComponent } from '../../shared/components/controllers/multi-dropdown/multi-dropdown.component';\r\nimport { QueryControlDirective } from '../../shared/directives/query-control.directive';\r\nimport { DatePickerComponent } from '../../shared/components/controllers/date-picker/date-picker.component';\r\n\r\n@NgModule({\r\n  declarations: [UiToolkitPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UiToolkitRoutingModule,\r\n    ButtonComponent,\r\n    SpinnerComponent,\r\n    InputComponent,\r\n    DropdownComponent,\r\n    TagComponent,\r\n    ReactiveFormsModule,\r\n    CheckboxComponent,\r\n    MultiDropdownComponent,\r\n    QueryControlDirective,\r\n    DatePickerComponent,\r\n    FormsModule\r\n  ]\r\n})\r\nexport class UiToolkitModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UiToolkitPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "MultiDropdownComponent"
                        },
                        {
                            "name": "QueryControlDirective"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TagComponent"
                        },
                        {
                            "name": "UiToolkitRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiToolkitRoutingModule",
            "id": "module-UiToolkitRoutingModule-ec9914edb9df94596d8563ed26e445ecd4c4fd779c42b7b119d49643ad653530910aef08f4889a97a559e2ac81d3f4edda7095df6c1f8f72a4f70e88ac818e00",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/ui-toolkit/ui-toolkit-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UiToolkitPageComponent } from './pages/ui-toolkit-page/ui-toolkit-page.component';\r\n\r\nconst routes: Routes = [{ path: '', component: UiToolkitPageComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UiToolkitRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideExperimentalZonelessChangeDetection(),\r\n    provideRouter(routes),\r\n    provideAnimations()\r\n  ]\r\n}"
            },
            {
                "name": "BOTTOM_SIDEBAR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/sidebar.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "VerticalTab[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Help',\r\n    icon: 'icon icon-help',\r\n    routerLink: ['/dashboard/help']\r\n  }\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/authorization/authorization.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  InputComponent,\r\n  InputPasswordComponent,\r\n  ButtonComponent,\r\n  CheckboxComponent,\r\n  AuthorizationContainerComponent\r\n]"
            },
            {
                "name": "createDashboardWorkingCapitalChartConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/dashboard/utils/dashboard-working-capital-chart.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  test: any[]\r\n): ChartConfiguration<'line'> => {\r\n  return {\r\n    type: 'line',\r\n    data: {\r\n      labels: [\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd'\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: 'Income',\r\n          data: test.map((i) => i * 3),\r\n          borderColor: '#29A073',\r\n          backgroundColor: '#29A073',\r\n          fill: false,\r\n          tension: 0.5\r\n        },\r\n        {\r\n          label: 'Expenses',\r\n          data: test.map((i) => i * Math.random()),\r\n          fill: false,\r\n          borderColor: '#EB5757',\r\n          backgroundColor: '#EB5757',\r\n          tension: 0.5\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      interaction: {\r\n        intersect: false\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        }\r\n      },\r\n      scales: {\r\n        y: {\r\n          grid: {\r\n            display: false\r\n          },\r\n          ticks: {\r\n            maxTicksLimit: 5\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n}"
            },
            {
                "name": "developmentGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/development.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(): boolean => {\r\n  const router: Router = inject(Router);\r\n\r\n  if (environment.production) {\r\n    router.navigate(['']);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.production.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "generateInputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/generate-inputs.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: Record<string, any>) => {\n  return Object.keys(args)\n    .map((key) => `[${key}]=\"${key}\"`)\n    .join(' ');\n}"
            },
            {
                "name": "MONTHS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/date-picker.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sep',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec'\r\n]"
            },
            {
                "name": "TIME_RANGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/time-range.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Option[]",
                "defaultValue": "[\r\n  {\r\n    id: TimeRange.LastDay,\r\n    label: 'Last Day'\r\n  },\r\n  {\r\n    id: TimeRange.LastWeek,\r\n    label: 'Last Week'\r\n  },\r\n  {\r\n    id: TimeRange.LastMonth,\r\n    label: 'Last Month'\r\n  },\r\n  {\r\n    id: TimeRange.LastYear,\r\n    label: 'Last Year'\r\n  }\r\n]"
            },
            {
                "name": "TOP_SIDEBAR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/sidebar.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "VerticalTab[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Dashboard',\r\n    icon: 'icon icon-home',\r\n    routerLink: '/dashboard/main'\r\n  },\r\n  {\r\n    label: 'Transactions',\r\n    icon: 'icon icon-transactions',\r\n    routerLink: '/dashboard/transactions'\r\n  },\r\n  {\r\n    label: 'Invoices',\r\n    icon: 'icon icon-invoices',\r\n    routerLink: '/dashboard/invoices'\r\n  },\r\n  {\r\n    label: 'My Wallets',\r\n    icon: 'icon icon-wallet-open',\r\n    routerLink: '/dashboard/my-wallets'\r\n  },\r\n  {\r\n    label: 'Settings',\r\n    icon: 'icon icon-settings',\r\n    routerLink: '/dashboard/settings'\r\n  }\r\n]"
            },
            {
                "name": "WEEK_DAYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/date-picker.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']"
            }
        ],
        "functions": [
            {
                "name": "chunkArray",
                "file": "src/app/shared/utils/chunk.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chunkSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "[][]",
                "jsdoctags": [
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chunkSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Both",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/directives/focusable.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "Focusable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Both | \"keyboard\" | \"mouse\" | \"none\"",
                "file": "src/app/shared/directives/focusable.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "ButtonSeverity",
                "childs": [
                    {
                        "name": "Primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "Secondary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary"
                    },
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/button.enum.ts"
            },
            {
                "name": "ButtonSize",
                "childs": [
                    {
                        "name": "Small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "Medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    },
                    {
                        "name": "Large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "large"
                    },
                    {
                        "name": "Wide",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "wide"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/button.enum.ts"
            },
            {
                "name": "ButtonStyle",
                "childs": [
                    {
                        "name": "Default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "Icon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "icon"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/button.enum.ts"
            },
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "Button",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "button"
                    },
                    {
                        "name": "Reset",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "reset"
                    },
                    {
                        "name": "Submit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "submit"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/button.enum.ts"
            },
            {
                "name": "CreditCardType",
                "childs": [
                    {
                        "name": "Visa",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Visa"
                    },
                    {
                        "name": "MasterCard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MasterCard"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/credit-card.enum.ts"
            },
            {
                "name": "Currency",
                "childs": [
                    {
                        "name": "USD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "USD"
                    },
                    {
                        "name": "EUR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EUR"
                    },
                    {
                        "name": "UAH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UAH"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/api/currency/currency.enum.ts"
            },
            {
                "name": "DatePickerDayMonth",
                "childs": [
                    {
                        "name": "Previous",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "previous"
                    },
                    {
                        "name": "Current",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "current"
                    },
                    {
                        "name": "Next",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "next"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/date-picker.enum.ts"
            },
            {
                "name": "FilterType",
                "childs": [
                    {
                        "name": "Dropdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dropdown"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/interfaces/filters.interface.ts"
            },
            {
                "name": "InputIconPosition",
                "childs": [
                    {
                        "name": "Left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    },
                    {
                        "name": "Right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/input.enum.ts"
            },
            {
                "name": "InputTextPosition",
                "childs": [
                    {
                        "name": "Left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    },
                    {
                        "name": "Center",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "center"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/input.enum.ts"
            },
            {
                "name": "LocalStorageKey",
                "childs": [
                    {
                        "name": "Theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "theme"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/local-storage.enum.ts"
            },
            {
                "name": "ProductType",
                "childs": [],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/api/product/product.enum.ts"
            },
            {
                "name": "SpinnerSize",
                "childs": [
                    {
                        "name": "Small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "Default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/spiner.enum.ts"
            },
            {
                "name": "TagSeverity",
                "childs": [
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "Warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/tag.enum.ts"
            },
            {
                "name": "Theme",
                "childs": [
                    {
                        "name": "Light",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light"
                    },
                    {
                        "name": "Dark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dark"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/themes.enum.ts"
            },
            {
                "name": "TimeRange",
                "childs": [
                    {
                        "name": "LastDay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lastDay"
                    },
                    {
                        "name": "LastWeek",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lastWeek"
                    },
                    {
                        "name": "LastMonth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lastMonth"
                    },
                    {
                        "name": "LastYear",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lastYear"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/time-range.enum.ts"
            },
            {
                "name": "TooltipStyle",
                "childs": [
                    {
                        "name": "Default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/tooltip.enum.ts"
            },
            {
                "name": "TransactionStatus",
                "childs": [
                    {
                        "name": "Pending",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pending"
                    },
                    {
                        "name": "Paid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "paid"
                    },
                    {
                        "name": "Unpaid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "unpaid"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/api/transaction/transaction.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideExperimentalZonelessChangeDetection(),\r\n    provideRouter(routes),\r\n    provideAnimations()\r\n  ]\r\n}"
                }
            ],
            "src/app/shared/constants/sidebar.constant.ts": [
                {
                    "name": "BOTTOM_SIDEBAR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/sidebar.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerticalTab[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Help',\r\n    icon: 'icon icon-help',\r\n    routerLink: ['/dashboard/help']\r\n  }\r\n]"
                },
                {
                    "name": "TOP_SIDEBAR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/sidebar.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerticalTab[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Dashboard',\r\n    icon: 'icon icon-home',\r\n    routerLink: '/dashboard/main'\r\n  },\r\n  {\r\n    label: 'Transactions',\r\n    icon: 'icon icon-transactions',\r\n    routerLink: '/dashboard/transactions'\r\n  },\r\n  {\r\n    label: 'Invoices',\r\n    icon: 'icon icon-invoices',\r\n    routerLink: '/dashboard/invoices'\r\n  },\r\n  {\r\n    label: 'My Wallets',\r\n    icon: 'icon icon-wallet-open',\r\n    routerLink: '/dashboard/my-wallets'\r\n  },\r\n  {\r\n    label: 'Settings',\r\n    icon: 'icon icon-settings',\r\n    routerLink: '/dashboard/settings'\r\n  }\r\n]"
                }
            ],
            "src/app/features/authorization/authorization.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/authorization/authorization.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  InputComponent,\r\n  InputPasswordComponent,\r\n  ButtonComponent,\r\n  CheckboxComponent,\r\n  AuthorizationContainerComponent\r\n]"
                }
            ],
            "src/app/features/dashboard/utils/dashboard-working-capital-chart.util.ts": [
                {
                    "name": "createDashboardWorkingCapitalChartConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/dashboard/utils/dashboard-working-capital-chart.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  test: any[]\r\n): ChartConfiguration<'line'> => {\r\n  return {\r\n    type: 'line',\r\n    data: {\r\n      labels: [\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd',\r\n        'asd'\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: 'Income',\r\n          data: test.map((i) => i * 3),\r\n          borderColor: '#29A073',\r\n          backgroundColor: '#29A073',\r\n          fill: false,\r\n          tension: 0.5\r\n        },\r\n        {\r\n          label: 'Expenses',\r\n          data: test.map((i) => i * Math.random()),\r\n          fill: false,\r\n          borderColor: '#EB5757',\r\n          backgroundColor: '#EB5757',\r\n          tension: 0.5\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      interaction: {\r\n        intersect: false\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        }\r\n      },\r\n      scales: {\r\n        y: {\r\n          grid: {\r\n            display: false\r\n          },\r\n          ticks: {\r\n            maxTicksLimit: 5\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n}"
                }
            ],
            "src/app/core/guards/development.guard.ts": [
                {
                    "name": "developmentGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/development.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(): boolean => {\r\n  const router: Router = inject(Router);\r\n\r\n  if (environment.production) {\r\n    router.navigate(['']);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/environments/environment.production.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.production.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/app/shared/utils/generate-inputs.util.ts": [
                {
                    "name": "generateInputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/generate-inputs.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: Record<string, any>) => {\n  return Object.keys(args)\n    .map((key) => `[${key}]=\"${key}\"`)\n    .join(' ');\n}"
                }
            ],
            "src/app/shared/constants/date-picker.constant.ts": [
                {
                    "name": "MONTHS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/date-picker.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sep',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec'\r\n]"
                },
                {
                    "name": "WEEK_DAYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/date-picker.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']"
                }
            ],
            "src/app/shared/constants/time-range.constant.ts": [
                {
                    "name": "TIME_RANGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/time-range.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Option[]",
                    "defaultValue": "[\r\n  {\r\n    id: TimeRange.LastDay,\r\n    label: 'Last Day'\r\n  },\r\n  {\r\n    id: TimeRange.LastWeek,\r\n    label: 'Last Week'\r\n  },\r\n  {\r\n    id: TimeRange.LastMonth,\r\n    label: 'Last Month'\r\n  },\r\n  {\r\n    id: TimeRange.LastYear,\r\n    label: 'Last Year'\r\n  }\r\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/utils/chunk.util.ts": [
                {
                    "name": "chunkArray",
                    "file": "src/app/shared/utils/chunk.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chunkSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "[][]",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chunkSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/enums/button.enum.ts": [
                {
                    "name": "ButtonSeverity",
                    "childs": [
                        {
                            "name": "Primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "Secondary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary"
                        },
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/button.enum.ts"
                },
                {
                    "name": "ButtonSize",
                    "childs": [
                        {
                            "name": "Small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "Medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        },
                        {
                            "name": "Large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "large"
                        },
                        {
                            "name": "Wide",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "wide"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/button.enum.ts"
                },
                {
                    "name": "ButtonStyle",
                    "childs": [
                        {
                            "name": "Default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "Icon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "icon"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/button.enum.ts"
                },
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "Button",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "button"
                        },
                        {
                            "name": "Reset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "reset"
                        },
                        {
                            "name": "Submit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "submit"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/button.enum.ts"
                }
            ],
            "src/app/shared/enums/credit-card.enum.ts": [
                {
                    "name": "CreditCardType",
                    "childs": [
                        {
                            "name": "Visa",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Visa"
                        },
                        {
                            "name": "MasterCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MasterCard"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/credit-card.enum.ts"
                }
            ],
            "src/app/shared/enums/api/currency/currency.enum.ts": [
                {
                    "name": "Currency",
                    "childs": [
                        {
                            "name": "USD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "USD"
                        },
                        {
                            "name": "EUR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EUR"
                        },
                        {
                            "name": "UAH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UAH"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/api/currency/currency.enum.ts"
                }
            ],
            "src/app/shared/enums/date-picker.enum.ts": [
                {
                    "name": "DatePickerDayMonth",
                    "childs": [
                        {
                            "name": "Previous",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "previous"
                        },
                        {
                            "name": "Current",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "current"
                        },
                        {
                            "name": "Next",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "next"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/date-picker.enum.ts"
                }
            ],
            "src/app/shared/interfaces/filters.interface.ts": [
                {
                    "name": "FilterType",
                    "childs": [
                        {
                            "name": "Dropdown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dropdown"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/interfaces/filters.interface.ts"
                }
            ],
            "src/app/shared/enums/input.enum.ts": [
                {
                    "name": "InputIconPosition",
                    "childs": [
                        {
                            "name": "Left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        },
                        {
                            "name": "Right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/input.enum.ts"
                },
                {
                    "name": "InputTextPosition",
                    "childs": [
                        {
                            "name": "Left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        },
                        {
                            "name": "Center",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "center"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/input.enum.ts"
                }
            ],
            "src/app/shared/enums/local-storage.enum.ts": [
                {
                    "name": "LocalStorageKey",
                    "childs": [
                        {
                            "name": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "theme"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/local-storage.enum.ts"
                }
            ],
            "src/app/shared/enums/api/product/product.enum.ts": [
                {
                    "name": "ProductType",
                    "childs": [],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/api/product/product.enum.ts"
                }
            ],
            "src/app/shared/enums/spiner.enum.ts": [
                {
                    "name": "SpinnerSize",
                    "childs": [
                        {
                            "name": "Small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "Default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/spiner.enum.ts"
                }
            ],
            "src/app/shared/enums/tag.enum.ts": [
                {
                    "name": "TagSeverity",
                    "childs": [
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "Warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/tag.enum.ts"
                }
            ],
            "src/app/core/enums/themes.enum.ts": [
                {
                    "name": "Theme",
                    "childs": [
                        {
                            "name": "Light",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light"
                        },
                        {
                            "name": "Dark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dark"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/themes.enum.ts"
                }
            ],
            "src/app/shared/enums/time-range.enum.ts": [
                {
                    "name": "TimeRange",
                    "childs": [
                        {
                            "name": "LastDay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lastDay"
                        },
                        {
                            "name": "LastWeek",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lastWeek"
                        },
                        {
                            "name": "LastMonth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lastMonth"
                        },
                        {
                            "name": "LastYear",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lastYear"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/time-range.enum.ts"
                }
            ],
            "src/app/shared/enums/tooltip.enum.ts": [
                {
                    "name": "TooltipStyle",
                    "childs": [
                        {
                            "name": "Default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/tooltip.enum.ts"
                }
            ],
            "src/app/shared/enums/api/transaction/transaction.enum.ts": [
                {
                    "name": "TransactionStatus",
                    "childs": [
                        {
                            "name": "Pending",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pending"
                        },
                        {
                            "name": "Paid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "paid"
                        },
                        {
                            "name": "Unpaid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "unpaid"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/api/transaction/transaction.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/directives/focusable.directive.ts": [
                {
                    "name": "Both",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/directives/focusable.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "Focusable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Both | \"keyboard\" | \"mouse\" | \"none\"",
                    "file": "src/app/shared/directives/focusable.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/development.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "developmentGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/authorization/authorization.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/authorization/pages/sign-in-page/sign-in-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/authorization/pages/sign-up-page/sign-up-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/dashboard-recent-transactions/dashboard-recent-transactions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardRecentTransactionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/dashboard-scheduled-transfers/dashboard-scheduled-transfers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardScheduledTransfersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/dashboard-statistic-card/dashboard-statistic-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardStatisticCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/dashboard-wallets/dashboard-wallets.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardWalletsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/dashboard-working-capital/dashboard-working-capital-chart/dashboard-working-capital-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardWorkingCapitalChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/dashboard-working-capital/dashboard-working-capital.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardWorkingCapitalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/interfaces/dashboard-working-capital-chart.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardWorkingChartDataset",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/interfaces/dashboard-working-capital-chart.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardWorkingChartDatasetItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/interfaces/dashboard-working-capital-chart.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardWorkingChartLegend",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/pages/dashboard-page/dashboard-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/utils/dashboard-working-capital-chart.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createDashboardWorkingCapitalChartConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/invoices/components/invoices-client-card/invoices-client-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoicesClientCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/invoices/interfaces/invoices-items.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InvoicesItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/invoices/interfaces/invoices-items.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InvoicesItemGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/invoices/pages/invoices-create-page/invoices-create-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoicesCreatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/invoices/pages/invoices-page/invoices-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoicesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/my-wallets/components/my-wallets-balance/my-wallets-balance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyWalletsBalanceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/my-wallets/pages/my-wallets-page/my-wallets-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyWalletsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/transactions/pages/transactions-page/transactions-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TransactionsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/ui-toolkit/pages/ui-toolkit-page/ui-toolkit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UiToolkitPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/controllers/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/controllers/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/controllers/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/controllers/input-password/input-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/controllers/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/controllers/multi-dropdown/multi-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/credit-card/credit-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreditCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/skeleton-loader/skeleton-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkeletonLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tabs/horizontal-tabs/horizontal-tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tabs/vertical-tabs/vertical-tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VerticalTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/transaction/transaction-date/transaction-date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TransactionDateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/transaction/transaction-product/transaction-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TransactionProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/date-picker.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MONTHS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/date-picker.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WEEK_DAYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/sidebar.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BOTTOM_SIDEBAR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/sidebar.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOP_SIDEBAR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/time-range.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIME_RANGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/copy-to-clipboard.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CopyToClipboardDirective",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/focusable.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FocusableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/focusable.directive.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Both",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/focusable.directive.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Focusable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/query-control.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "QueryControlDirective",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/skeleton-loading.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SkeletonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/table-loading.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TableLoadingDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/database.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DBEntity",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseProduct",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/response.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Response",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/response.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/transaction/transaction.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseTransaction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/api/transaction/transaction.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Transaction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/date-picker.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DatePickerOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/dropdown.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/filters.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Filter",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/horizontal-tab.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HorizontalTab",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/option.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Option",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/vertical-tab.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VerticalTab",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/authorization-container/authorization-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorizationContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/dashboard-container/dashboard-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/card-numbers.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CardNumbersPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/route-title.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RouteTitleService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/chunk.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "chunkArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/generate-inputs.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "generateInputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.production.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}
